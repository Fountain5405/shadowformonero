/* automatically generated by rust-bindgen 0.65.1 */

/* Build script: ./gen-kernel-bindings.sh */
/* Kernel tag: v6.2 */

pub const LINUX_EPERM: u32 = 1;
pub const LINUX_ENOENT: u32 = 2;
pub const LINUX_ESRCH: u32 = 3;
pub const LINUX_EINTR: u32 = 4;
pub const LINUX_EIO: u32 = 5;
pub const LINUX_ENXIO: u32 = 6;
pub const LINUX_E2BIG: u32 = 7;
pub const LINUX_ENOEXEC: u32 = 8;
pub const LINUX_EBADF: u32 = 9;
pub const LINUX_ECHILD: u32 = 10;
pub const LINUX_EAGAIN: u32 = 11;
pub const LINUX_ENOMEM: u32 = 12;
pub const LINUX_EACCES: u32 = 13;
pub const LINUX_EFAULT: u32 = 14;
pub const LINUX_ENOTBLK: u32 = 15;
pub const LINUX_EBUSY: u32 = 16;
pub const LINUX_EEXIST: u32 = 17;
pub const LINUX_EXDEV: u32 = 18;
pub const LINUX_ENODEV: u32 = 19;
pub const LINUX_ENOTDIR: u32 = 20;
pub const LINUX_EISDIR: u32 = 21;
pub const LINUX_EINVAL: u32 = 22;
pub const LINUX_ENFILE: u32 = 23;
pub const LINUX_EMFILE: u32 = 24;
pub const LINUX_ENOTTY: u32 = 25;
pub const LINUX_ETXTBSY: u32 = 26;
pub const LINUX_EFBIG: u32 = 27;
pub const LINUX_ENOSPC: u32 = 28;
pub const LINUX_ESPIPE: u32 = 29;
pub const LINUX_EROFS: u32 = 30;
pub const LINUX_EMLINK: u32 = 31;
pub const LINUX_EPIPE: u32 = 32;
pub const LINUX_EDOM: u32 = 33;
pub const LINUX_ERANGE: u32 = 34;
pub const LINUX_EDEADLK: u32 = 35;
pub const LINUX_ENAMETOOLONG: u32 = 36;
pub const LINUX_ENOLCK: u32 = 37;
pub const LINUX_ENOSYS: u32 = 38;
pub const LINUX_ENOTEMPTY: u32 = 39;
pub const LINUX_ELOOP: u32 = 40;
pub const LINUX_EWOULDBLOCK: u32 = 11;
pub const LINUX_ENOMSG: u32 = 42;
pub const LINUX_EIDRM: u32 = 43;
pub const LINUX_ECHRNG: u32 = 44;
pub const LINUX_EL2NSYNC: u32 = 45;
pub const LINUX_EL3HLT: u32 = 46;
pub const LINUX_EL3RST: u32 = 47;
pub const LINUX_ELNRNG: u32 = 48;
pub const LINUX_EUNATCH: u32 = 49;
pub const LINUX_ENOCSI: u32 = 50;
pub const LINUX_EL2HLT: u32 = 51;
pub const LINUX_EBADE: u32 = 52;
pub const LINUX_EBADR: u32 = 53;
pub const LINUX_EXFULL: u32 = 54;
pub const LINUX_ENOANO: u32 = 55;
pub const LINUX_EBADRQC: u32 = 56;
pub const LINUX_EBADSLT: u32 = 57;
pub const LINUX_EDEADLOCK: u32 = 35;
pub const LINUX_EBFONT: u32 = 59;
pub const LINUX_ENOSTR: u32 = 60;
pub const LINUX_ENODATA: u32 = 61;
pub const LINUX_ETIME: u32 = 62;
pub const LINUX_ENOSR: u32 = 63;
pub const LINUX_ENONET: u32 = 64;
pub const LINUX_ENOPKG: u32 = 65;
pub const LINUX_EREMOTE: u32 = 66;
pub const LINUX_ENOLINK: u32 = 67;
pub const LINUX_EADV: u32 = 68;
pub const LINUX_ESRMNT: u32 = 69;
pub const LINUX_ECOMM: u32 = 70;
pub const LINUX_EPROTO: u32 = 71;
pub const LINUX_EMULTIHOP: u32 = 72;
pub const LINUX_EDOTDOT: u32 = 73;
pub const LINUX_EBADMSG: u32 = 74;
pub const LINUX_EOVERFLOW: u32 = 75;
pub const LINUX_ENOTUNIQ: u32 = 76;
pub const LINUX_EBADFD: u32 = 77;
pub const LINUX_EREMCHG: u32 = 78;
pub const LINUX_ELIBACC: u32 = 79;
pub const LINUX_ELIBBAD: u32 = 80;
pub const LINUX_ELIBSCN: u32 = 81;
pub const LINUX_ELIBMAX: u32 = 82;
pub const LINUX_ELIBEXEC: u32 = 83;
pub const LINUX_EILSEQ: u32 = 84;
pub const LINUX_ERESTART: u32 = 85;
pub const LINUX_ESTRPIPE: u32 = 86;
pub const LINUX_EUSERS: u32 = 87;
pub const LINUX_ENOTSOCK: u32 = 88;
pub const LINUX_EDESTADDRREQ: u32 = 89;
pub const LINUX_EMSGSIZE: u32 = 90;
pub const LINUX_EPROTOTYPE: u32 = 91;
pub const LINUX_ENOPROTOOPT: u32 = 92;
pub const LINUX_EPROTONOSUPPORT: u32 = 93;
pub const LINUX_ESOCKTNOSUPPORT: u32 = 94;
pub const LINUX_EOPNOTSUPP: u32 = 95;
pub const LINUX_EPFNOSUPPORT: u32 = 96;
pub const LINUX_EAFNOSUPPORT: u32 = 97;
pub const LINUX_EADDRINUSE: u32 = 98;
pub const LINUX_EADDRNOTAVAIL: u32 = 99;
pub const LINUX_ENETDOWN: u32 = 100;
pub const LINUX_ENETUNREACH: u32 = 101;
pub const LINUX_ENETRESET: u32 = 102;
pub const LINUX_ECONNABORTED: u32 = 103;
pub const LINUX_ECONNRESET: u32 = 104;
pub const LINUX_ENOBUFS: u32 = 105;
pub const LINUX_EISCONN: u32 = 106;
pub const LINUX_ENOTCONN: u32 = 107;
pub const LINUX_ESHUTDOWN: u32 = 108;
pub const LINUX_ETOOMANYREFS: u32 = 109;
pub const LINUX_ETIMEDOUT: u32 = 110;
pub const LINUX_ECONNREFUSED: u32 = 111;
pub const LINUX_EHOSTDOWN: u32 = 112;
pub const LINUX_EHOSTUNREACH: u32 = 113;
pub const LINUX_EALREADY: u32 = 114;
pub const LINUX_EINPROGRESS: u32 = 115;
pub const LINUX_ESTALE: u32 = 116;
pub const LINUX_EUCLEAN: u32 = 117;
pub const LINUX_ENOTNAM: u32 = 118;
pub const LINUX_ENAVAIL: u32 = 119;
pub const LINUX_EISNAM: u32 = 120;
pub const LINUX_EREMOTEIO: u32 = 121;
pub const LINUX_EDQUOT: u32 = 122;
pub const LINUX_ENOMEDIUM: u32 = 123;
pub const LINUX_EMEDIUMTYPE: u32 = 124;
pub const LINUX_ECANCELED: u32 = 125;
pub const LINUX_ENOKEY: u32 = 126;
pub const LINUX_EKEYEXPIRED: u32 = 127;
pub const LINUX_EKEYREVOKED: u32 = 128;
pub const LINUX_EKEYREJECTED: u32 = 129;
pub const LINUX_EOWNERDEAD: u32 = 130;
pub const LINUX_ENOTRECOVERABLE: u32 = 131;
pub const LINUX_ERFKILL: u32 = 132;
pub const LINUX_EHWPOISON: u32 = 133;
pub const LINUX___BITS_PER_LONG: u32 = 64;
pub const LINUX___FD_SETSIZE: u32 = 1024;
pub const LINUX_O_ACCMODE: u32 = 3;
pub const LINUX_O_RDONLY: u32 = 0;
pub const LINUX_O_WRONLY: u32 = 1;
pub const LINUX_O_RDWR: u32 = 2;
pub const LINUX_O_CREAT: u32 = 64;
pub const LINUX_O_EXCL: u32 = 128;
pub const LINUX_O_NOCTTY: u32 = 256;
pub const LINUX_O_TRUNC: u32 = 512;
pub const LINUX_O_APPEND: u32 = 1024;
pub const LINUX_O_NONBLOCK: u32 = 2048;
pub const LINUX_O_DSYNC: u32 = 4096;
pub const LINUX_FASYNC: u32 = 8192;
pub const LINUX_O_DIRECT: u32 = 16384;
pub const LINUX_O_LARGEFILE: u32 = 32768;
pub const LINUX_O_DIRECTORY: u32 = 65536;
pub const LINUX_O_NOFOLLOW: u32 = 131072;
pub const LINUX_O_NOATIME: u32 = 262144;
pub const LINUX_O_CLOEXEC: u32 = 524288;
pub const LINUX___O_SYNC: u32 = 1048576;
pub const LINUX_O_SYNC: u32 = 1052672;
pub const LINUX_O_PATH: u32 = 2097152;
pub const LINUX___O_TMPFILE: u32 = 4194304;
pub const LINUX_O_TMPFILE: u32 = 4259840;
pub const LINUX_O_TMPFILE_MASK: u32 = 4259904;
pub const LINUX_O_NDELAY: u32 = 2048;
pub const LINUX_F_DUPFD: u32 = 0;
pub const LINUX_F_GETFD: u32 = 1;
pub const LINUX_F_SETFD: u32 = 2;
pub const LINUX_F_GETFL: u32 = 3;
pub const LINUX_F_SETFL: u32 = 4;
pub const LINUX_F_GETLK: u32 = 5;
pub const LINUX_F_SETLK: u32 = 6;
pub const LINUX_F_SETLKW: u32 = 7;
pub const LINUX_F_SETOWN: u32 = 8;
pub const LINUX_F_GETOWN: u32 = 9;
pub const LINUX_F_SETSIG: u32 = 10;
pub const LINUX_F_GETSIG: u32 = 11;
pub const LINUX_F_SETOWN_EX: u32 = 15;
pub const LINUX_F_GETOWN_EX: u32 = 16;
pub const LINUX_F_GETOWNER_UIDS: u32 = 17;
pub const LINUX_F_OFD_GETLK: u32 = 36;
pub const LINUX_F_OFD_SETLK: u32 = 37;
pub const LINUX_F_OFD_SETLKW: u32 = 38;
pub const LINUX_F_OWNER_TID: u32 = 0;
pub const LINUX_F_OWNER_PID: u32 = 1;
pub const LINUX_F_OWNER_PGRP: u32 = 2;
pub const LINUX_FD_CLOEXEC: u32 = 1;
pub const LINUX_F_RDLCK: u32 = 0;
pub const LINUX_F_WRLCK: u32 = 1;
pub const LINUX_F_UNLCK: u32 = 2;
pub const LINUX_F_EXLCK: u32 = 4;
pub const LINUX_F_SHLCK: u32 = 8;
pub const LINUX_LOCK_SH: u32 = 1;
pub const LINUX_LOCK_EX: u32 = 2;
pub const LINUX_LOCK_NB: u32 = 4;
pub const LINUX_LOCK_UN: u32 = 8;
pub const LINUX_LOCK_MAND: u32 = 32;
pub const LINUX_LOCK_READ: u32 = 64;
pub const LINUX_LOCK_WRITE: u32 = 128;
pub const LINUX_LOCK_RW: u32 = 192;
pub const LINUX_F_LINUX_SPECIFIC_BASE: u32 = 1024;
pub const LINUX_RESOLVE_NO_XDEV: u32 = 1;
pub const LINUX_RESOLVE_NO_MAGICLINKS: u32 = 2;
pub const LINUX_RESOLVE_NO_SYMLINKS: u32 = 4;
pub const LINUX_RESOLVE_BENEATH: u32 = 8;
pub const LINUX_RESOLVE_IN_ROOT: u32 = 16;
pub const LINUX_RESOLVE_CACHED: u32 = 32;
pub const LINUX_F_SETLEASE: u32 = 1024;
pub const LINUX_F_GETLEASE: u32 = 1025;
pub const LINUX_F_CANCELLK: u32 = 1029;
pub const LINUX_F_DUPFD_CLOEXEC: u32 = 1030;
pub const LINUX_F_NOTIFY: u32 = 1026;
pub const LINUX_F_SETPIPE_SZ: u32 = 1031;
pub const LINUX_F_GETPIPE_SZ: u32 = 1032;
pub const LINUX_F_ADD_SEALS: u32 = 1033;
pub const LINUX_F_GET_SEALS: u32 = 1034;
pub const LINUX_F_SEAL_SEAL: u32 = 1;
pub const LINUX_F_SEAL_SHRINK: u32 = 2;
pub const LINUX_F_SEAL_GROW: u32 = 4;
pub const LINUX_F_SEAL_WRITE: u32 = 8;
pub const LINUX_F_SEAL_FUTURE_WRITE: u32 = 16;
pub const LINUX_F_GET_RW_HINT: u32 = 1035;
pub const LINUX_F_SET_RW_HINT: u32 = 1036;
pub const LINUX_F_GET_FILE_RW_HINT: u32 = 1037;
pub const LINUX_F_SET_FILE_RW_HINT: u32 = 1038;
pub const LINUX_RWH_WRITE_LIFE_NOT_SET: u32 = 0;
pub const LINUX_RWH_WRITE_LIFE_NONE: u32 = 1;
pub const LINUX_RWH_WRITE_LIFE_SHORT: u32 = 2;
pub const LINUX_RWH_WRITE_LIFE_MEDIUM: u32 = 3;
pub const LINUX_RWH_WRITE_LIFE_LONG: u32 = 4;
pub const LINUX_RWH_WRITE_LIFE_EXTREME: u32 = 5;
pub const LINUX_RWF_WRITE_LIFE_NOT_SET: u32 = 0;
pub const LINUX_DN_ACCESS: u32 = 1;
pub const LINUX_DN_MODIFY: u32 = 2;
pub const LINUX_DN_CREATE: u32 = 4;
pub const LINUX_DN_DELETE: u32 = 8;
pub const LINUX_DN_RENAME: u32 = 16;
pub const LINUX_DN_ATTRIB: u32 = 32;
pub const LINUX_DN_MULTISHOT: u32 = 2147483648;
pub const LINUX_AT_FDCWD: i32 = -100;
pub const LINUX_AT_SYMLINK_NOFOLLOW: u32 = 256;
pub const LINUX_AT_EACCESS: u32 = 512;
pub const LINUX_AT_REMOVEDIR: u32 = 512;
pub const LINUX_AT_SYMLINK_FOLLOW: u32 = 1024;
pub const LINUX_AT_NO_AUTOMOUNT: u32 = 2048;
pub const LINUX_AT_EMPTY_PATH: u32 = 4096;
pub const LINUX_AT_STATX_SYNC_TYPE: u32 = 24576;
pub const LINUX_AT_STATX_SYNC_AS_STAT: u32 = 0;
pub const LINUX_AT_STATX_FORCE_SYNC: u32 = 8192;
pub const LINUX_AT_STATX_DONT_SYNC: u32 = 16384;
pub const LINUX_AT_RECURSIVE: u32 = 32768;
pub const LINUX_EPOLL_CLOEXEC: u32 = 524288;
pub const LINUX_EPOLL_CTL_ADD: u32 = 1;
pub const LINUX_EPOLL_CTL_DEL: u32 = 2;
pub const LINUX_EPOLL_CTL_MOD: u32 = 3;
pub const LINUX___UAPI_DEF_IF_IFCONF: u32 = 1;
pub const LINUX___UAPI_DEF_IF_IFMAP: u32 = 1;
pub const LINUX___UAPI_DEF_IF_IFNAMSIZ: u32 = 1;
pub const LINUX___UAPI_DEF_IF_IFREQ: u32 = 1;
pub const LINUX___UAPI_DEF_IF_NET_DEVICE_FLAGS: u32 = 1;
pub const LINUX___UAPI_DEF_IF_NET_DEVICE_FLAGS_LOWER_UP_DORMANT_ECHO: u32 = 1;
pub const LINUX___UAPI_DEF_IN_ADDR: u32 = 1;
pub const LINUX___UAPI_DEF_IN_IPPROTO: u32 = 1;
pub const LINUX___UAPI_DEF_IN_PKTINFO: u32 = 1;
pub const LINUX___UAPI_DEF_IP_MREQ: u32 = 1;
pub const LINUX___UAPI_DEF_SOCKADDR_IN: u32 = 1;
pub const LINUX___UAPI_DEF_IN_CLASS: u32 = 1;
pub const LINUX___UAPI_DEF_IN6_ADDR: u32 = 1;
pub const LINUX___UAPI_DEF_IN6_ADDR_ALT: u32 = 1;
pub const LINUX___UAPI_DEF_SOCKADDR_IN6: u32 = 1;
pub const LINUX___UAPI_DEF_IPV6_MREQ: u32 = 1;
pub const LINUX___UAPI_DEF_IPPROTO_V6: u32 = 1;
pub const LINUX___UAPI_DEF_IPV6_OPTIONS: u32 = 1;
pub const LINUX___UAPI_DEF_IN6_PKTINFO: u32 = 1;
pub const LINUX___UAPI_DEF_IP6_MTUINFO: u32 = 1;
pub const LINUX___UAPI_DEF_SOCKADDR_IPX: u32 = 1;
pub const LINUX___UAPI_DEF_IPX_ROUTE_DEFINITION: u32 = 1;
pub const LINUX___UAPI_DEF_IPX_INTERFACE_DEFINITION: u32 = 1;
pub const LINUX___UAPI_DEF_IPX_CONFIG_DATA: u32 = 1;
pub const LINUX___UAPI_DEF_IPX_ROUTE_DEF: u32 = 1;
pub const LINUX___UAPI_DEF_XATTR: u32 = 1;
pub const LINUX__K_SS_MAXSIZE: u32 = 128;
pub const LINUX_SOCK_SNDBUF_LOCK: u32 = 1;
pub const LINUX_SOCK_RCVBUF_LOCK: u32 = 2;
pub const LINUX_SOCK_BUF_LOCK_MASK: u32 = 3;
pub const LINUX_SOCK_TXREHASH_DEFAULT: u32 = 255;
pub const LINUX_SOCK_TXREHASH_DISABLED: u32 = 0;
pub const LINUX_SOCK_TXREHASH_ENABLED: u32 = 1;
pub const LINUX_IP_TOS: u32 = 1;
pub const LINUX_IP_TTL: u32 = 2;
pub const LINUX_IP_HDRINCL: u32 = 3;
pub const LINUX_IP_OPTIONS: u32 = 4;
pub const LINUX_IP_ROUTER_ALERT: u32 = 5;
pub const LINUX_IP_RECVOPTS: u32 = 6;
pub const LINUX_IP_RETOPTS: u32 = 7;
pub const LINUX_IP_PKTINFO: u32 = 8;
pub const LINUX_IP_PKTOPTIONS: u32 = 9;
pub const LINUX_IP_MTU_DISCOVER: u32 = 10;
pub const LINUX_IP_RECVERR: u32 = 11;
pub const LINUX_IP_RECVTTL: u32 = 12;
pub const LINUX_IP_RECVTOS: u32 = 13;
pub const LINUX_IP_MTU: u32 = 14;
pub const LINUX_IP_FREEBIND: u32 = 15;
pub const LINUX_IP_IPSEC_POLICY: u32 = 16;
pub const LINUX_IP_XFRM_POLICY: u32 = 17;
pub const LINUX_IP_PASSSEC: u32 = 18;
pub const LINUX_IP_TRANSPARENT: u32 = 19;
pub const LINUX_IP_RECVRETOPTS: u32 = 7;
pub const LINUX_IP_ORIGDSTADDR: u32 = 20;
pub const LINUX_IP_RECVORIGDSTADDR: u32 = 20;
pub const LINUX_IP_MINTTL: u32 = 21;
pub const LINUX_IP_NODEFRAG: u32 = 22;
pub const LINUX_IP_CHECKSUM: u32 = 23;
pub const LINUX_IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const LINUX_IP_RECVFRAGSIZE: u32 = 25;
pub const LINUX_IP_RECVERR_RFC4884: u32 = 26;
pub const LINUX_IP_PMTUDISC_DONT: u32 = 0;
pub const LINUX_IP_PMTUDISC_WANT: u32 = 1;
pub const LINUX_IP_PMTUDISC_DO: u32 = 2;
pub const LINUX_IP_PMTUDISC_PROBE: u32 = 3;
pub const LINUX_IP_PMTUDISC_INTERFACE: u32 = 4;
pub const LINUX_IP_PMTUDISC_OMIT: u32 = 5;
pub const LINUX_IP_MULTICAST_IF: u32 = 32;
pub const LINUX_IP_MULTICAST_TTL: u32 = 33;
pub const LINUX_IP_MULTICAST_LOOP: u32 = 34;
pub const LINUX_IP_ADD_MEMBERSHIP: u32 = 35;
pub const LINUX_IP_DROP_MEMBERSHIP: u32 = 36;
pub const LINUX_IP_UNBLOCK_SOURCE: u32 = 37;
pub const LINUX_IP_BLOCK_SOURCE: u32 = 38;
pub const LINUX_IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const LINUX_IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const LINUX_IP_MSFILTER: u32 = 41;
pub const LINUX_MCAST_JOIN_GROUP: u32 = 42;
pub const LINUX_MCAST_BLOCK_SOURCE: u32 = 43;
pub const LINUX_MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const LINUX_MCAST_LEAVE_GROUP: u32 = 45;
pub const LINUX_MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const LINUX_MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const LINUX_MCAST_MSFILTER: u32 = 48;
pub const LINUX_IP_MULTICAST_ALL: u32 = 49;
pub const LINUX_IP_UNICAST_IF: u32 = 50;
pub const LINUX_MCAST_EXCLUDE: u32 = 0;
pub const LINUX_MCAST_INCLUDE: u32 = 1;
pub const LINUX_IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const LINUX_IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const LINUX___SOCK_SIZE__: u32 = 16;
pub const LINUX_IN_CLASSA_NET: u32 = 4278190080;
pub const LINUX_IN_CLASSA_NSHIFT: u32 = 24;
pub const LINUX_IN_CLASSA_HOST: u32 = 16777215;
pub const LINUX_IN_CLASSA_MAX: u32 = 128;
pub const LINUX_IN_CLASSB_NET: u32 = 4294901760;
pub const LINUX_IN_CLASSB_NSHIFT: u32 = 16;
pub const LINUX_IN_CLASSB_HOST: u32 = 65535;
pub const LINUX_IN_CLASSB_MAX: u32 = 65536;
pub const LINUX_IN_CLASSC_NET: u32 = 4294967040;
pub const LINUX_IN_CLASSC_NSHIFT: u32 = 8;
pub const LINUX_IN_CLASSC_HOST: u32 = 255;
pub const LINUX_IN_MULTICAST_NET: u32 = 3758096384;
pub const LINUX_IN_CLASSE_NET: u32 = 4294967295;
pub const LINUX_IN_CLASSE_NSHIFT: u32 = 0;
pub const LINUX_IN_LOOPBACKNET: u32 = 127;
pub const LINUX_INADDR_LOOPBACK: u32 = 2130706433;
pub const LINUX_INADDR_UNSPEC_GROUP: u32 = 3758096384;
pub const LINUX_INADDR_ALLHOSTS_GROUP: u32 = 3758096385;
pub const LINUX_INADDR_ALLRTRS_GROUP: u32 = 3758096386;
pub const LINUX_INADDR_ALLSNOOPERS_GROUP: u32 = 3758096490;
pub const LINUX_INADDR_MAX_LOCAL_GROUP: u32 = 3758096639;
pub const LINUX___LITTLE_ENDIAN: u32 = 1234;
pub const LINUX_NR_OPEN: u32 = 1024;
pub const LINUX_NGROUPS_MAX: u32 = 65536;
pub const LINUX_ARG_MAX: u32 = 131072;
pub const LINUX_LINK_MAX: u32 = 127;
pub const LINUX_MAX_CANON: u32 = 255;
pub const LINUX_MAX_INPUT: u32 = 255;
pub const LINUX_NAME_MAX: u32 = 255;
pub const LINUX_PATH_MAX: u32 = 4096;
pub const LINUX_PIPE_BUF: u32 = 4096;
pub const LINUX_XATTR_NAME_MAX: u32 = 255;
pub const LINUX_XATTR_SIZE_MAX: u32 = 65536;
pub const LINUX_XATTR_LIST_MAX: u32 = 65536;
pub const LINUX_RTSIG_MAX: u32 = 32;
pub const LINUX_MAP_32BIT: u32 = 64;
pub const LINUX_PROT_READ: u32 = 1;
pub const LINUX_PROT_WRITE: u32 = 2;
pub const LINUX_PROT_EXEC: u32 = 4;
pub const LINUX_PROT_SEM: u32 = 8;
pub const LINUX_PROT_NONE: u32 = 0;
pub const LINUX_PROT_GROWSDOWN: u32 = 16777216;
pub const LINUX_PROT_GROWSUP: u32 = 33554432;
pub const LINUX_MAP_TYPE: u32 = 15;
pub const LINUX_MAP_FIXED: u32 = 16;
pub const LINUX_MAP_ANONYMOUS: u32 = 32;
pub const LINUX_MAP_POPULATE: u32 = 32768;
pub const LINUX_MAP_NONBLOCK: u32 = 65536;
pub const LINUX_MAP_STACK: u32 = 131072;
pub const LINUX_MAP_HUGETLB: u32 = 262144;
pub const LINUX_MAP_SYNC: u32 = 524288;
pub const LINUX_MAP_FIXED_NOREPLACE: u32 = 1048576;
pub const LINUX_MAP_UNINITIALIZED: u32 = 67108864;
pub const LINUX_MLOCK_ONFAULT: u32 = 1;
pub const LINUX_MS_ASYNC: u32 = 1;
pub const LINUX_MS_INVALIDATE: u32 = 2;
pub const LINUX_MS_SYNC: u32 = 4;
pub const LINUX_MADV_NORMAL: u32 = 0;
pub const LINUX_MADV_RANDOM: u32 = 1;
pub const LINUX_MADV_SEQUENTIAL: u32 = 2;
pub const LINUX_MADV_WILLNEED: u32 = 3;
pub const LINUX_MADV_DONTNEED: u32 = 4;
pub const LINUX_MADV_FREE: u32 = 8;
pub const LINUX_MADV_REMOVE: u32 = 9;
pub const LINUX_MADV_DONTFORK: u32 = 10;
pub const LINUX_MADV_DOFORK: u32 = 11;
pub const LINUX_MADV_HWPOISON: u32 = 100;
pub const LINUX_MADV_SOFT_OFFLINE: u32 = 101;
pub const LINUX_MADV_MERGEABLE: u32 = 12;
pub const LINUX_MADV_UNMERGEABLE: u32 = 13;
pub const LINUX_MADV_HUGEPAGE: u32 = 14;
pub const LINUX_MADV_NOHUGEPAGE: u32 = 15;
pub const LINUX_MADV_DONTDUMP: u32 = 16;
pub const LINUX_MADV_DODUMP: u32 = 17;
pub const LINUX_MADV_WIPEONFORK: u32 = 18;
pub const LINUX_MADV_KEEPONFORK: u32 = 19;
pub const LINUX_MADV_COLD: u32 = 20;
pub const LINUX_MADV_PAGEOUT: u32 = 21;
pub const LINUX_MADV_POPULATE_READ: u32 = 22;
pub const LINUX_MADV_POPULATE_WRITE: u32 = 23;
pub const LINUX_MADV_DONTNEED_LOCKED: u32 = 24;
pub const LINUX_MADV_COLLAPSE: u32 = 25;
pub const LINUX_MAP_FILE: u32 = 0;
pub const LINUX_PKEY_DISABLE_ACCESS: u32 = 1;
pub const LINUX_PKEY_DISABLE_WRITE: u32 = 2;
pub const LINUX_PKEY_ACCESS_MASK: u32 = 3;
pub const LINUX_MAP_GROWSDOWN: u32 = 256;
pub const LINUX_MAP_DENYWRITE: u32 = 2048;
pub const LINUX_MAP_EXECUTABLE: u32 = 4096;
pub const LINUX_MAP_LOCKED: u32 = 8192;
pub const LINUX_MAP_NORESERVE: u32 = 16384;
pub const LINUX_MCL_CURRENT: u32 = 1;
pub const LINUX_MCL_FUTURE: u32 = 2;
pub const LINUX_MCL_ONFAULT: u32 = 4;
pub const LINUX_HUGETLB_FLAG_ENCODE_SHIFT: u32 = 26;
pub const LINUX_HUGETLB_FLAG_ENCODE_MASK: u32 = 63;
pub const LINUX_HUGETLB_FLAG_ENCODE_16KB: u32 = 939524096;
pub const LINUX_HUGETLB_FLAG_ENCODE_64KB: u32 = 1073741824;
pub const LINUX_HUGETLB_FLAG_ENCODE_512KB: u32 = 1275068416;
pub const LINUX_HUGETLB_FLAG_ENCODE_1MB: u32 = 1342177280;
pub const LINUX_HUGETLB_FLAG_ENCODE_2MB: u32 = 1409286144;
pub const LINUX_HUGETLB_FLAG_ENCODE_8MB: u32 = 1543503872;
pub const LINUX_HUGETLB_FLAG_ENCODE_16MB: u32 = 1610612736;
pub const LINUX_HUGETLB_FLAG_ENCODE_32MB: u32 = 1677721600;
pub const LINUX_HUGETLB_FLAG_ENCODE_256MB: u32 = 1879048192;
pub const LINUX_HUGETLB_FLAG_ENCODE_512MB: u32 = 1946157056;
pub const LINUX_HUGETLB_FLAG_ENCODE_1GB: u32 = 2013265920;
pub const LINUX_HUGETLB_FLAG_ENCODE_2GB: u32 = 2080374784;
pub const LINUX_HUGETLB_FLAG_ENCODE_16GB: u32 = 2281701376;
pub const LINUX_MREMAP_MAYMOVE: u32 = 1;
pub const LINUX_MREMAP_FIXED: u32 = 2;
pub const LINUX_MREMAP_DONTUNMAP: u32 = 4;
pub const LINUX_OVERCOMMIT_GUESS: u32 = 0;
pub const LINUX_OVERCOMMIT_ALWAYS: u32 = 1;
pub const LINUX_OVERCOMMIT_NEVER: u32 = 2;
pub const LINUX_MAP_SHARED: u32 = 1;
pub const LINUX_MAP_PRIVATE: u32 = 2;
pub const LINUX_MAP_SHARED_VALIDATE: u32 = 3;
pub const LINUX_MAP_HUGE_SHIFT: u32 = 26;
pub const LINUX_MAP_HUGE_MASK: u32 = 63;
pub const LINUX_MAP_HUGE_16KB: u32 = 939524096;
pub const LINUX_MAP_HUGE_64KB: u32 = 1073741824;
pub const LINUX_MAP_HUGE_512KB: u32 = 1275068416;
pub const LINUX_MAP_HUGE_1MB: u32 = 1342177280;
pub const LINUX_MAP_HUGE_2MB: u32 = 1409286144;
pub const LINUX_MAP_HUGE_8MB: u32 = 1543503872;
pub const LINUX_MAP_HUGE_16MB: u32 = 1610612736;
pub const LINUX_MAP_HUGE_32MB: u32 = 1677721600;
pub const LINUX_MAP_HUGE_256MB: u32 = 1879048192;
pub const LINUX_MAP_HUGE_512MB: u32 = 1946157056;
pub const LINUX_MAP_HUGE_1GB: u32 = 2013265920;
pub const LINUX_MAP_HUGE_2GB: u32 = 2080374784;
pub const LINUX_MAP_HUGE_16GB: u32 = 2281701376;
pub const LINUX_PR_SET_PDEATHSIG: u32 = 1;
pub const LINUX_PR_GET_PDEATHSIG: u32 = 2;
pub const LINUX_PR_GET_DUMPABLE: u32 = 3;
pub const LINUX_PR_SET_DUMPABLE: u32 = 4;
pub const LINUX_PR_GET_UNALIGN: u32 = 5;
pub const LINUX_PR_SET_UNALIGN: u32 = 6;
pub const LINUX_PR_UNALIGN_NOPRINT: u32 = 1;
pub const LINUX_PR_UNALIGN_SIGBUS: u32 = 2;
pub const LINUX_PR_GET_KEEPCAPS: u32 = 7;
pub const LINUX_PR_SET_KEEPCAPS: u32 = 8;
pub const LINUX_PR_GET_FPEMU: u32 = 9;
pub const LINUX_PR_SET_FPEMU: u32 = 10;
pub const LINUX_PR_FPEMU_NOPRINT: u32 = 1;
pub const LINUX_PR_FPEMU_SIGFPE: u32 = 2;
pub const LINUX_PR_GET_FPEXC: u32 = 11;
pub const LINUX_PR_SET_FPEXC: u32 = 12;
pub const LINUX_PR_FP_EXC_SW_ENABLE: u32 = 128;
pub const LINUX_PR_FP_EXC_DIV: u32 = 65536;
pub const LINUX_PR_FP_EXC_OVF: u32 = 131072;
pub const LINUX_PR_FP_EXC_UND: u32 = 262144;
pub const LINUX_PR_FP_EXC_RES: u32 = 524288;
pub const LINUX_PR_FP_EXC_INV: u32 = 1048576;
pub const LINUX_PR_FP_EXC_DISABLED: u32 = 0;
pub const LINUX_PR_FP_EXC_NONRECOV: u32 = 1;
pub const LINUX_PR_FP_EXC_ASYNC: u32 = 2;
pub const LINUX_PR_FP_EXC_PRECISE: u32 = 3;
pub const LINUX_PR_GET_TIMING: u32 = 13;
pub const LINUX_PR_SET_TIMING: u32 = 14;
pub const LINUX_PR_TIMING_STATISTICAL: u32 = 0;
pub const LINUX_PR_TIMING_TIMESTAMP: u32 = 1;
pub const LINUX_PR_SET_NAME: u32 = 15;
pub const LINUX_PR_GET_NAME: u32 = 16;
pub const LINUX_PR_GET_ENDIAN: u32 = 19;
pub const LINUX_PR_SET_ENDIAN: u32 = 20;
pub const LINUX_PR_ENDIAN_BIG: u32 = 0;
pub const LINUX_PR_ENDIAN_LITTLE: u32 = 1;
pub const LINUX_PR_ENDIAN_PPC_LITTLE: u32 = 2;
pub const LINUX_PR_GET_SECCOMP: u32 = 21;
pub const LINUX_PR_SET_SECCOMP: u32 = 22;
pub const LINUX_PR_CAPBSET_READ: u32 = 23;
pub const LINUX_PR_CAPBSET_DROP: u32 = 24;
pub const LINUX_PR_GET_TSC: u32 = 25;
pub const LINUX_PR_SET_TSC: u32 = 26;
pub const LINUX_PR_TSC_ENABLE: u32 = 1;
pub const LINUX_PR_TSC_SIGSEGV: u32 = 2;
pub const LINUX_PR_GET_SECUREBITS: u32 = 27;
pub const LINUX_PR_SET_SECUREBITS: u32 = 28;
pub const LINUX_PR_SET_TIMERSLACK: u32 = 29;
pub const LINUX_PR_GET_TIMERSLACK: u32 = 30;
pub const LINUX_PR_TASK_PERF_EVENTS_DISABLE: u32 = 31;
pub const LINUX_PR_TASK_PERF_EVENTS_ENABLE: u32 = 32;
pub const LINUX_PR_MCE_KILL: u32 = 33;
pub const LINUX_PR_MCE_KILL_CLEAR: u32 = 0;
pub const LINUX_PR_MCE_KILL_SET: u32 = 1;
pub const LINUX_PR_MCE_KILL_LATE: u32 = 0;
pub const LINUX_PR_MCE_KILL_EARLY: u32 = 1;
pub const LINUX_PR_MCE_KILL_DEFAULT: u32 = 2;
pub const LINUX_PR_MCE_KILL_GET: u32 = 34;
pub const LINUX_PR_SET_MM: u32 = 35;
pub const LINUX_PR_SET_MM_START_CODE: u32 = 1;
pub const LINUX_PR_SET_MM_END_CODE: u32 = 2;
pub const LINUX_PR_SET_MM_START_DATA: u32 = 3;
pub const LINUX_PR_SET_MM_END_DATA: u32 = 4;
pub const LINUX_PR_SET_MM_START_STACK: u32 = 5;
pub const LINUX_PR_SET_MM_START_BRK: u32 = 6;
pub const LINUX_PR_SET_MM_BRK: u32 = 7;
pub const LINUX_PR_SET_MM_ARG_START: u32 = 8;
pub const LINUX_PR_SET_MM_ARG_END: u32 = 9;
pub const LINUX_PR_SET_MM_ENV_START: u32 = 10;
pub const LINUX_PR_SET_MM_ENV_END: u32 = 11;
pub const LINUX_PR_SET_MM_AUXV: u32 = 12;
pub const LINUX_PR_SET_MM_EXE_FILE: u32 = 13;
pub const LINUX_PR_SET_MM_MAP: u32 = 14;
pub const LINUX_PR_SET_MM_MAP_SIZE: u32 = 15;
pub const LINUX_PR_SET_PTRACER: u32 = 1499557217;
pub const LINUX_PR_SET_CHILD_SUBREAPER: u32 = 36;
pub const LINUX_PR_GET_CHILD_SUBREAPER: u32 = 37;
pub const LINUX_PR_SET_NO_NEW_PRIVS: u32 = 38;
pub const LINUX_PR_GET_NO_NEW_PRIVS: u32 = 39;
pub const LINUX_PR_GET_TID_ADDRESS: u32 = 40;
pub const LINUX_PR_SET_THP_DISABLE: u32 = 41;
pub const LINUX_PR_GET_THP_DISABLE: u32 = 42;
pub const LINUX_PR_MPX_ENABLE_MANAGEMENT: u32 = 43;
pub const LINUX_PR_MPX_DISABLE_MANAGEMENT: u32 = 44;
pub const LINUX_PR_SET_FP_MODE: u32 = 45;
pub const LINUX_PR_GET_FP_MODE: u32 = 46;
pub const LINUX_PR_FP_MODE_FR: u32 = 1;
pub const LINUX_PR_FP_MODE_FRE: u32 = 2;
pub const LINUX_PR_CAP_AMBIENT: u32 = 47;
pub const LINUX_PR_CAP_AMBIENT_IS_SET: u32 = 1;
pub const LINUX_PR_CAP_AMBIENT_RAISE: u32 = 2;
pub const LINUX_PR_CAP_AMBIENT_LOWER: u32 = 3;
pub const LINUX_PR_CAP_AMBIENT_CLEAR_ALL: u32 = 4;
pub const LINUX_PR_SVE_SET_VL: u32 = 50;
pub const LINUX_PR_SVE_SET_VL_ONEXEC: u32 = 262144;
pub const LINUX_PR_SVE_GET_VL: u32 = 51;
pub const LINUX_PR_SVE_VL_LEN_MASK: u32 = 65535;
pub const LINUX_PR_SVE_VL_INHERIT: u32 = 131072;
pub const LINUX_PR_GET_SPECULATION_CTRL: u32 = 52;
pub const LINUX_PR_SET_SPECULATION_CTRL: u32 = 53;
pub const LINUX_PR_SPEC_STORE_BYPASS: u32 = 0;
pub const LINUX_PR_SPEC_INDIRECT_BRANCH: u32 = 1;
pub const LINUX_PR_SPEC_L1D_FLUSH: u32 = 2;
pub const LINUX_PR_SPEC_NOT_AFFECTED: u32 = 0;
pub const LINUX_PR_SPEC_PRCTL: u32 = 1;
pub const LINUX_PR_SPEC_ENABLE: u32 = 2;
pub const LINUX_PR_SPEC_DISABLE: u32 = 4;
pub const LINUX_PR_SPEC_FORCE_DISABLE: u32 = 8;
pub const LINUX_PR_SPEC_DISABLE_NOEXEC: u32 = 16;
pub const LINUX_PR_PAC_RESET_KEYS: u32 = 54;
pub const LINUX_PR_PAC_APIAKEY: u32 = 1;
pub const LINUX_PR_PAC_APIBKEY: u32 = 2;
pub const LINUX_PR_PAC_APDAKEY: u32 = 4;
pub const LINUX_PR_PAC_APDBKEY: u32 = 8;
pub const LINUX_PR_PAC_APGAKEY: u32 = 16;
pub const LINUX_PR_SET_TAGGED_ADDR_CTRL: u32 = 55;
pub const LINUX_PR_GET_TAGGED_ADDR_CTRL: u32 = 56;
pub const LINUX_PR_TAGGED_ADDR_ENABLE: u32 = 1;
pub const LINUX_PR_MTE_TCF_NONE: u32 = 0;
pub const LINUX_PR_MTE_TCF_SYNC: u32 = 2;
pub const LINUX_PR_MTE_TCF_ASYNC: u32 = 4;
pub const LINUX_PR_MTE_TCF_MASK: u32 = 6;
pub const LINUX_PR_MTE_TAG_SHIFT: u32 = 3;
pub const LINUX_PR_MTE_TAG_MASK: u32 = 524280;
pub const LINUX_PR_MTE_TCF_SHIFT: u32 = 1;
pub const LINUX_PR_SET_IO_FLUSHER: u32 = 57;
pub const LINUX_PR_GET_IO_FLUSHER: u32 = 58;
pub const LINUX_PR_SET_SYSCALL_USER_DISPATCH: u32 = 59;
pub const LINUX_PR_SYS_DISPATCH_OFF: u32 = 0;
pub const LINUX_PR_SYS_DISPATCH_ON: u32 = 1;
pub const LINUX_SYSCALL_DISPATCH_FILTER_ALLOW: u32 = 0;
pub const LINUX_SYSCALL_DISPATCH_FILTER_BLOCK: u32 = 1;
pub const LINUX_PR_PAC_SET_ENABLED_KEYS: u32 = 60;
pub const LINUX_PR_PAC_GET_ENABLED_KEYS: u32 = 61;
pub const LINUX_PR_SCHED_CORE: u32 = 62;
pub const LINUX_PR_SCHED_CORE_GET: u32 = 0;
pub const LINUX_PR_SCHED_CORE_CREATE: u32 = 1;
pub const LINUX_PR_SCHED_CORE_SHARE_TO: u32 = 2;
pub const LINUX_PR_SCHED_CORE_SHARE_FROM: u32 = 3;
pub const LINUX_PR_SCHED_CORE_MAX: u32 = 4;
pub const LINUX_PR_SCHED_CORE_SCOPE_THREAD: u32 = 0;
pub const LINUX_PR_SCHED_CORE_SCOPE_THREAD_GROUP: u32 = 1;
pub const LINUX_PR_SCHED_CORE_SCOPE_PROCESS_GROUP: u32 = 2;
pub const LINUX_PR_SME_SET_VL: u32 = 63;
pub const LINUX_PR_SME_SET_VL_ONEXEC: u32 = 262144;
pub const LINUX_PR_SME_GET_VL: u32 = 64;
pub const LINUX_PR_SME_VL_LEN_MASK: u32 = 65535;
pub const LINUX_PR_SME_VL_INHERIT: u32 = 131072;
pub const LINUX_PR_SET_VMA: u32 = 1398164801;
pub const LINUX_PR_SET_VMA_ANON_NAME: u32 = 0;
pub const LINUX_ITIMER_REAL: u32 = 0;
pub const LINUX_ITIMER_VIRTUAL: u32 = 1;
pub const LINUX_ITIMER_PROF: u32 = 2;
pub const LINUX_CLOCK_REALTIME: u32 = 0;
pub const LINUX_CLOCK_MONOTONIC: u32 = 1;
pub const LINUX_CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const LINUX_CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const LINUX_CLOCK_MONOTONIC_RAW: u32 = 4;
pub const LINUX_CLOCK_REALTIME_COARSE: u32 = 5;
pub const LINUX_CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const LINUX_CLOCK_BOOTTIME: u32 = 7;
pub const LINUX_CLOCK_REALTIME_ALARM: u32 = 8;
pub const LINUX_CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const LINUX_CLOCK_SGI_CYCLE: u32 = 10;
pub const LINUX_CLOCK_TAI: u32 = 11;
pub const LINUX_MAX_CLOCKS: u32 = 16;
pub const LINUX_CLOCKS_MASK: u32 = 1;
pub const LINUX_CLOCKS_MONO: u32 = 1;
pub const LINUX_TIMER_ABSTIME: u32 = 1;
pub const LINUX_RUSAGE_SELF: u32 = 0;
pub const LINUX_RUSAGE_CHILDREN: i32 = -1;
pub const LINUX_RUSAGE_BOTH: i32 = -2;
pub const LINUX_RUSAGE_THREAD: u32 = 1;
pub const LINUX_RLIM64_INFINITY: i32 = -1;
pub const LINUX_PRIO_MIN: i32 = -20;
pub const LINUX_PRIO_MAX: u32 = 20;
pub const LINUX_PRIO_PROCESS: u32 = 0;
pub const LINUX_PRIO_PGRP: u32 = 1;
pub const LINUX_PRIO_USER: u32 = 2;
pub const LINUX__STK_LIM: u32 = 8388608;
pub const LINUX_MLOCK_LIMIT: u32 = 8388608;
pub const LINUX_RLIMIT_CPU: u32 = 0;
pub const LINUX_RLIMIT_FSIZE: u32 = 1;
pub const LINUX_RLIMIT_DATA: u32 = 2;
pub const LINUX_RLIMIT_STACK: u32 = 3;
pub const LINUX_RLIMIT_CORE: u32 = 4;
pub const LINUX_RLIMIT_RSS: u32 = 5;
pub const LINUX_RLIMIT_NPROC: u32 = 6;
pub const LINUX_RLIMIT_NOFILE: u32 = 7;
pub const LINUX_RLIMIT_MEMLOCK: u32 = 8;
pub const LINUX_RLIMIT_AS: u32 = 9;
pub const LINUX_RLIMIT_LOCKS: u32 = 10;
pub const LINUX_RLIMIT_SIGPENDING: u32 = 11;
pub const LINUX_RLIMIT_MSGQUEUE: u32 = 12;
pub const LINUX_RLIMIT_NICE: u32 = 13;
pub const LINUX_RLIMIT_RTPRIO: u32 = 14;
pub const LINUX_RLIMIT_RTTIME: u32 = 15;
pub const LINUX_RLIM_NLIMITS: u32 = 16;
pub const LINUX_RLIM_INFINITY: i32 = -1;
pub const LINUX_CSIGNAL: u32 = 255;
pub const LINUX_CLONE_VM: u32 = 256;
pub const LINUX_CLONE_FS: u32 = 512;
pub const LINUX_CLONE_FILES: u32 = 1024;
pub const LINUX_CLONE_SIGHAND: u32 = 2048;
pub const LINUX_CLONE_PIDFD: u32 = 4096;
pub const LINUX_CLONE_PTRACE: u32 = 8192;
pub const LINUX_CLONE_VFORK: u32 = 16384;
pub const LINUX_CLONE_PARENT: u32 = 32768;
pub const LINUX_CLONE_THREAD: u32 = 65536;
pub const LINUX_CLONE_NEWNS: u32 = 131072;
pub const LINUX_CLONE_SYSVSEM: u32 = 262144;
pub const LINUX_CLONE_SETTLS: u32 = 524288;
pub const LINUX_CLONE_PARENT_SETTID: u32 = 1048576;
pub const LINUX_CLONE_CHILD_CLEARTID: u32 = 2097152;
pub const LINUX_CLONE_DETACHED: u32 = 4194304;
pub const LINUX_CLONE_UNTRACED: u32 = 8388608;
pub const LINUX_CLONE_CHILD_SETTID: u32 = 16777216;
pub const LINUX_CLONE_NEWCGROUP: u32 = 33554432;
pub const LINUX_CLONE_NEWUTS: u32 = 67108864;
pub const LINUX_CLONE_NEWIPC: u32 = 134217728;
pub const LINUX_CLONE_NEWUSER: u32 = 268435456;
pub const LINUX_CLONE_NEWPID: u32 = 536870912;
pub const LINUX_CLONE_NEWNET: u32 = 1073741824;
pub const LINUX_CLONE_IO: u32 = 2147483648;
pub const LINUX_CLONE_CLEAR_SIGHAND: u64 = 4294967296;
pub const LINUX_CLONE_INTO_CGROUP: u64 = 8589934592;
pub const LINUX_CLONE_NEWTIME: u32 = 128;
pub const LINUX_CLONE_ARGS_SIZE_VER0: u32 = 64;
pub const LINUX_CLONE_ARGS_SIZE_VER1: u32 = 80;
pub const LINUX_CLONE_ARGS_SIZE_VER2: u32 = 88;
pub const LINUX_SCHED_NORMAL: u32 = 0;
pub const LINUX_SCHED_FIFO: u32 = 1;
pub const LINUX_SCHED_RR: u32 = 2;
pub const LINUX_SCHED_BATCH: u32 = 3;
pub const LINUX_SCHED_IDLE: u32 = 5;
pub const LINUX_SCHED_DEADLINE: u32 = 6;
pub const LINUX_SCHED_RESET_ON_FORK: u32 = 1073741824;
pub const LINUX_SCHED_FLAG_RESET_ON_FORK: u32 = 1;
pub const LINUX_SCHED_FLAG_RECLAIM: u32 = 2;
pub const LINUX_SCHED_FLAG_DL_OVERRUN: u32 = 4;
pub const LINUX_SCHED_FLAG_KEEP_POLICY: u32 = 8;
pub const LINUX_SCHED_FLAG_KEEP_PARAMS: u32 = 16;
pub const LINUX_SCHED_FLAG_UTIL_CLAMP_MIN: u32 = 32;
pub const LINUX_SCHED_FLAG_UTIL_CLAMP_MAX: u32 = 64;
pub const LINUX_SCHED_FLAG_KEEP_ALL: u32 = 24;
pub const LINUX_SCHED_FLAG_UTIL_CLAMP: u32 = 96;
pub const LINUX_SCHED_FLAG_ALL: u32 = 127;
pub const LINUX_NSIG: u32 = 32;
pub const LINUX_SIGHUP: u32 = 1;
pub const LINUX_SIGINT: u32 = 2;
pub const LINUX_SIGQUIT: u32 = 3;
pub const LINUX_SIGILL: u32 = 4;
pub const LINUX_SIGTRAP: u32 = 5;
pub const LINUX_SIGABRT: u32 = 6;
pub const LINUX_SIGIOT: u32 = 6;
pub const LINUX_SIGBUS: u32 = 7;
pub const LINUX_SIGFPE: u32 = 8;
pub const LINUX_SIGKILL: u32 = 9;
pub const LINUX_SIGUSR1: u32 = 10;
pub const LINUX_SIGSEGV: u32 = 11;
pub const LINUX_SIGUSR2: u32 = 12;
pub const LINUX_SIGPIPE: u32 = 13;
pub const LINUX_SIGALRM: u32 = 14;
pub const LINUX_SIGTERM: u32 = 15;
pub const LINUX_SIGSTKFLT: u32 = 16;
pub const LINUX_SIGCHLD: u32 = 17;
pub const LINUX_SIGCONT: u32 = 18;
pub const LINUX_SIGSTOP: u32 = 19;
pub const LINUX_SIGTSTP: u32 = 20;
pub const LINUX_SIGTTIN: u32 = 21;
pub const LINUX_SIGTTOU: u32 = 22;
pub const LINUX_SIGURG: u32 = 23;
pub const LINUX_SIGXCPU: u32 = 24;
pub const LINUX_SIGXFSZ: u32 = 25;
pub const LINUX_SIGVTALRM: u32 = 26;
pub const LINUX_SIGPROF: u32 = 27;
pub const LINUX_SIGWINCH: u32 = 28;
pub const LINUX_SIGIO: u32 = 29;
pub const LINUX_SIGPOLL: u32 = 29;
pub const LINUX_SIGPWR: u32 = 30;
pub const LINUX_SIGSYS: u32 = 31;
pub const LINUX_SIGUNUSED: u32 = 31;
pub const LINUX_SIGRTMIN: u32 = 32;
pub const LINUX_SA_RESTORER: u32 = 67108864;
pub const LINUX_MINSIGSTKSZ: u32 = 2048;
pub const LINUX_SIGSTKSZ: u32 = 8192;
pub const LINUX_SA_NOCLDSTOP: u32 = 1;
pub const LINUX_SA_NOCLDWAIT: u32 = 2;
pub const LINUX_SA_SIGINFO: u32 = 4;
pub const LINUX_SA_UNSUPPORTED: u32 = 1024;
pub const LINUX_SA_EXPOSE_TAGBITS: u32 = 2048;
pub const LINUX_SA_ONSTACK: u32 = 134217728;
pub const LINUX_SA_RESTART: u32 = 268435456;
pub const LINUX_SA_NODEFER: u32 = 1073741824;
pub const LINUX_SA_RESETHAND: u32 = 2147483648;
pub const LINUX_SA_NOMASK: u32 = 1073741824;
pub const LINUX_SA_ONESHOT: u32 = 2147483648;
pub const LINUX_SIG_BLOCK: u32 = 0;
pub const LINUX_SIG_UNBLOCK: u32 = 1;
pub const LINUX_SIG_SETMASK: u32 = 2;
pub const LINUX_SI_MAX_SIZE: u32 = 128;
pub const LINUX_SI_USER: u32 = 0;
pub const LINUX_SI_KERNEL: u32 = 128;
pub const LINUX_SI_QUEUE: i32 = -1;
pub const LINUX_SI_TIMER: i32 = -2;
pub const LINUX_SI_MESGQ: i32 = -3;
pub const LINUX_SI_ASYNCIO: i32 = -4;
pub const LINUX_SI_SIGIO: i32 = -5;
pub const LINUX_SI_TKILL: i32 = -6;
pub const LINUX_SI_DETHREAD: i32 = -7;
pub const LINUX_SI_ASYNCNL: i32 = -60;
pub const LINUX_ILL_ILLOPC: u32 = 1;
pub const LINUX_ILL_ILLOPN: u32 = 2;
pub const LINUX_ILL_ILLADR: u32 = 3;
pub const LINUX_ILL_ILLTRP: u32 = 4;
pub const LINUX_ILL_PRVOPC: u32 = 5;
pub const LINUX_ILL_PRVREG: u32 = 6;
pub const LINUX_ILL_COPROC: u32 = 7;
pub const LINUX_ILL_BADSTK: u32 = 8;
pub const LINUX_ILL_BADIADDR: u32 = 9;
pub const LINUX___ILL_BREAK: u32 = 10;
pub const LINUX___ILL_BNDMOD: u32 = 11;
pub const LINUX_NSIGILL: u32 = 11;
pub const LINUX_FPE_INTDIV: u32 = 1;
pub const LINUX_FPE_INTOVF: u32 = 2;
pub const LINUX_FPE_FLTDIV: u32 = 3;
pub const LINUX_FPE_FLTOVF: u32 = 4;
pub const LINUX_FPE_FLTUND: u32 = 5;
pub const LINUX_FPE_FLTRES: u32 = 6;
pub const LINUX_FPE_FLTINV: u32 = 7;
pub const LINUX_FPE_FLTSUB: u32 = 8;
pub const LINUX___FPE_DECOVF: u32 = 9;
pub const LINUX___FPE_DECDIV: u32 = 10;
pub const LINUX___FPE_DECERR: u32 = 11;
pub const LINUX___FPE_INVASC: u32 = 12;
pub const LINUX___FPE_INVDEC: u32 = 13;
pub const LINUX_FPE_FLTUNK: u32 = 14;
pub const LINUX_FPE_CONDTRAP: u32 = 15;
pub const LINUX_NSIGFPE: u32 = 15;
pub const LINUX_SEGV_MAPERR: u32 = 1;
pub const LINUX_SEGV_ACCERR: u32 = 2;
pub const LINUX_SEGV_BNDERR: u32 = 3;
pub const LINUX_SEGV_PKUERR: u32 = 4;
pub const LINUX_SEGV_ACCADI: u32 = 5;
pub const LINUX_SEGV_ADIDERR: u32 = 6;
pub const LINUX_SEGV_ADIPERR: u32 = 7;
pub const LINUX_SEGV_MTEAERR: u32 = 8;
pub const LINUX_SEGV_MTESERR: u32 = 9;
pub const LINUX_NSIGSEGV: u32 = 9;
pub const LINUX_BUS_ADRALN: u32 = 1;
pub const LINUX_BUS_ADRERR: u32 = 2;
pub const LINUX_BUS_OBJERR: u32 = 3;
pub const LINUX_BUS_MCEERR_AR: u32 = 4;
pub const LINUX_BUS_MCEERR_AO: u32 = 5;
pub const LINUX_NSIGBUS: u32 = 5;
pub const LINUX_TRAP_BRKPT: u32 = 1;
pub const LINUX_TRAP_TRACE: u32 = 2;
pub const LINUX_TRAP_BRANCH: u32 = 3;
pub const LINUX_TRAP_HWBKPT: u32 = 4;
pub const LINUX_TRAP_UNK: u32 = 5;
pub const LINUX_TRAP_PERF: u32 = 6;
pub const LINUX_NSIGTRAP: u32 = 6;
pub const LINUX_TRAP_PERF_FLAG_ASYNC: u32 = 1;
pub const LINUX_CLD_EXITED: u32 = 1;
pub const LINUX_CLD_KILLED: u32 = 2;
pub const LINUX_CLD_DUMPED: u32 = 3;
pub const LINUX_CLD_TRAPPED: u32 = 4;
pub const LINUX_CLD_STOPPED: u32 = 5;
pub const LINUX_CLD_CONTINUED: u32 = 6;
pub const LINUX_NSIGCHLD: u32 = 6;
pub const LINUX_POLL_IN: u32 = 1;
pub const LINUX_POLL_OUT: u32 = 2;
pub const LINUX_POLL_MSG: u32 = 3;
pub const LINUX_POLL_ERR: u32 = 4;
pub const LINUX_POLL_PRI: u32 = 5;
pub const LINUX_POLL_HUP: u32 = 6;
pub const LINUX_NSIGPOLL: u32 = 6;
pub const LINUX_SYS_SECCOMP: u32 = 1;
pub const LINUX_SYS_USER_DISPATCH: u32 = 2;
pub const LINUX_NSIGSYS: u32 = 2;
pub const LINUX_EMT_TAGOVF: u32 = 1;
pub const LINUX_NSIGEMT: u32 = 1;
pub const LINUX_SIGEV_SIGNAL: u32 = 0;
pub const LINUX_SIGEV_NONE: u32 = 1;
pub const LINUX_SIGEV_THREAD: u32 = 2;
pub const LINUX_SIGEV_THREAD_ID: u32 = 4;
pub const LINUX_SIGEV_MAX_SIZE: u32 = 64;
pub const LINUX_SS_ONSTACK: u32 = 1;
pub const LINUX_SS_DISABLE: u32 = 2;
pub const LINUX_SS_FLAG_BITS: u32 = 2147483648;
pub const LINUX_FIOSETOWN: u32 = 35073;
pub const LINUX_SIOCSPGRP: u32 = 35074;
pub const LINUX_FIOGETOWN: u32 = 35075;
pub const LINUX_SIOCGPGRP: u32 = 35076;
pub const LINUX_SIOCATMARK: u32 = 35077;
pub const LINUX_SIOCGSTAMP_OLD: u32 = 35078;
pub const LINUX_SIOCGSTAMPNS_OLD: u32 = 35079;
pub const LINUX_SOCK_IOC_TYPE: u32 = 137;
pub const LINUX_SIOCGSTAMP: u32 = 35078;
pub const LINUX_SIOCGSTAMPNS: u32 = 35079;
pub const LINUX_SIOCADDRT: u32 = 35083;
pub const LINUX_SIOCDELRT: u32 = 35084;
pub const LINUX_SIOCRTMSG: u32 = 35085;
pub const LINUX_SIOCGIFNAME: u32 = 35088;
pub const LINUX_SIOCSIFLINK: u32 = 35089;
pub const LINUX_SIOCGIFCONF: u32 = 35090;
pub const LINUX_SIOCGIFFLAGS: u32 = 35091;
pub const LINUX_SIOCSIFFLAGS: u32 = 35092;
pub const LINUX_SIOCGIFADDR: u32 = 35093;
pub const LINUX_SIOCSIFADDR: u32 = 35094;
pub const LINUX_SIOCGIFDSTADDR: u32 = 35095;
pub const LINUX_SIOCSIFDSTADDR: u32 = 35096;
pub const LINUX_SIOCGIFBRDADDR: u32 = 35097;
pub const LINUX_SIOCSIFBRDADDR: u32 = 35098;
pub const LINUX_SIOCGIFNETMASK: u32 = 35099;
pub const LINUX_SIOCSIFNETMASK: u32 = 35100;
pub const LINUX_SIOCGIFMETRIC: u32 = 35101;
pub const LINUX_SIOCSIFMETRIC: u32 = 35102;
pub const LINUX_SIOCGIFMEM: u32 = 35103;
pub const LINUX_SIOCSIFMEM: u32 = 35104;
pub const LINUX_SIOCGIFMTU: u32 = 35105;
pub const LINUX_SIOCSIFMTU: u32 = 35106;
pub const LINUX_SIOCSIFNAME: u32 = 35107;
pub const LINUX_SIOCSIFHWADDR: u32 = 35108;
pub const LINUX_SIOCGIFENCAP: u32 = 35109;
pub const LINUX_SIOCSIFENCAP: u32 = 35110;
pub const LINUX_SIOCGIFHWADDR: u32 = 35111;
pub const LINUX_SIOCGIFSLAVE: u32 = 35113;
pub const LINUX_SIOCSIFSLAVE: u32 = 35120;
pub const LINUX_SIOCADDMULTI: u32 = 35121;
pub const LINUX_SIOCDELMULTI: u32 = 35122;
pub const LINUX_SIOCGIFINDEX: u32 = 35123;
pub const LINUX_SIOGIFINDEX: u32 = 35123;
pub const LINUX_SIOCSIFPFLAGS: u32 = 35124;
pub const LINUX_SIOCGIFPFLAGS: u32 = 35125;
pub const LINUX_SIOCDIFADDR: u32 = 35126;
pub const LINUX_SIOCSIFHWBROADCAST: u32 = 35127;
pub const LINUX_SIOCGIFCOUNT: u32 = 35128;
pub const LINUX_SIOCGIFBR: u32 = 35136;
pub const LINUX_SIOCSIFBR: u32 = 35137;
pub const LINUX_SIOCGIFTXQLEN: u32 = 35138;
pub const LINUX_SIOCSIFTXQLEN: u32 = 35139;
pub const LINUX_SIOCETHTOOL: u32 = 35142;
pub const LINUX_SIOCGMIIPHY: u32 = 35143;
pub const LINUX_SIOCGMIIREG: u32 = 35144;
pub const LINUX_SIOCSMIIREG: u32 = 35145;
pub const LINUX_SIOCWANDEV: u32 = 35146;
pub const LINUX_SIOCOUTQNSD: u32 = 35147;
pub const LINUX_SIOCGSKNS: u32 = 35148;
pub const LINUX_SIOCDARP: u32 = 35155;
pub const LINUX_SIOCGARP: u32 = 35156;
pub const LINUX_SIOCSARP: u32 = 35157;
pub const LINUX_SIOCDRARP: u32 = 35168;
pub const LINUX_SIOCGRARP: u32 = 35169;
pub const LINUX_SIOCSRARP: u32 = 35170;
pub const LINUX_SIOCGIFMAP: u32 = 35184;
pub const LINUX_SIOCSIFMAP: u32 = 35185;
pub const LINUX_SIOCADDDLCI: u32 = 35200;
pub const LINUX_SIOCDELDLCI: u32 = 35201;
pub const LINUX_SIOCGIFVLAN: u32 = 35202;
pub const LINUX_SIOCSIFVLAN: u32 = 35203;
pub const LINUX_SIOCBONDENSLAVE: u32 = 35216;
pub const LINUX_SIOCBONDRELEASE: u32 = 35217;
pub const LINUX_SIOCBONDSETHWADDR: u32 = 35218;
pub const LINUX_SIOCBONDSLAVEINFOQUERY: u32 = 35219;
pub const LINUX_SIOCBONDINFOQUERY: u32 = 35220;
pub const LINUX_SIOCBONDCHANGEACTIVE: u32 = 35221;
pub const LINUX_SIOCBRADDBR: u32 = 35232;
pub const LINUX_SIOCBRDELBR: u32 = 35233;
pub const LINUX_SIOCBRADDIF: u32 = 35234;
pub const LINUX_SIOCBRDELIF: u32 = 35235;
pub const LINUX_SIOCSHWTSTAMP: u32 = 35248;
pub const LINUX_SIOCGHWTSTAMP: u32 = 35249;
pub const LINUX_SIOCDEVPRIVATE: u32 = 35312;
pub const LINUX_SIOCPROTOPRIVATE: u32 = 35296;
pub const LINUX___X32_SYSCALL_BIT: u32 = 1073741824;
pub const LINUX___NR_read: u32 = 0;
pub const LINUX___NR_write: u32 = 1;
pub const LINUX___NR_open: u32 = 2;
pub const LINUX___NR_close: u32 = 3;
pub const LINUX___NR_stat: u32 = 4;
pub const LINUX___NR_fstat: u32 = 5;
pub const LINUX___NR_lstat: u32 = 6;
pub const LINUX___NR_poll: u32 = 7;
pub const LINUX___NR_lseek: u32 = 8;
pub const LINUX___NR_mmap: u32 = 9;
pub const LINUX___NR_mprotect: u32 = 10;
pub const LINUX___NR_munmap: u32 = 11;
pub const LINUX___NR_brk: u32 = 12;
pub const LINUX___NR_rt_sigaction: u32 = 13;
pub const LINUX___NR_rt_sigprocmask: u32 = 14;
pub const LINUX___NR_rt_sigreturn: u32 = 15;
pub const LINUX___NR_ioctl: u32 = 16;
pub const LINUX___NR_pread64: u32 = 17;
pub const LINUX___NR_pwrite64: u32 = 18;
pub const LINUX___NR_readv: u32 = 19;
pub const LINUX___NR_writev: u32 = 20;
pub const LINUX___NR_access: u32 = 21;
pub const LINUX___NR_pipe: u32 = 22;
pub const LINUX___NR_select: u32 = 23;
pub const LINUX___NR_sched_yield: u32 = 24;
pub const LINUX___NR_mremap: u32 = 25;
pub const LINUX___NR_msync: u32 = 26;
pub const LINUX___NR_mincore: u32 = 27;
pub const LINUX___NR_madvise: u32 = 28;
pub const LINUX___NR_shmget: u32 = 29;
pub const LINUX___NR_shmat: u32 = 30;
pub const LINUX___NR_shmctl: u32 = 31;
pub const LINUX___NR_dup: u32 = 32;
pub const LINUX___NR_dup2: u32 = 33;
pub const LINUX___NR_pause: u32 = 34;
pub const LINUX___NR_nanosleep: u32 = 35;
pub const LINUX___NR_getitimer: u32 = 36;
pub const LINUX___NR_alarm: u32 = 37;
pub const LINUX___NR_setitimer: u32 = 38;
pub const LINUX___NR_getpid: u32 = 39;
pub const LINUX___NR_sendfile: u32 = 40;
pub const LINUX___NR_socket: u32 = 41;
pub const LINUX___NR_connect: u32 = 42;
pub const LINUX___NR_accept: u32 = 43;
pub const LINUX___NR_sendto: u32 = 44;
pub const LINUX___NR_recvfrom: u32 = 45;
pub const LINUX___NR_sendmsg: u32 = 46;
pub const LINUX___NR_recvmsg: u32 = 47;
pub const LINUX___NR_shutdown: u32 = 48;
pub const LINUX___NR_bind: u32 = 49;
pub const LINUX___NR_listen: u32 = 50;
pub const LINUX___NR_getsockname: u32 = 51;
pub const LINUX___NR_getpeername: u32 = 52;
pub const LINUX___NR_socketpair: u32 = 53;
pub const LINUX___NR_setsockopt: u32 = 54;
pub const LINUX___NR_getsockopt: u32 = 55;
pub const LINUX___NR_clone: u32 = 56;
pub const LINUX___NR_fork: u32 = 57;
pub const LINUX___NR_vfork: u32 = 58;
pub const LINUX___NR_execve: u32 = 59;
pub const LINUX___NR_exit: u32 = 60;
pub const LINUX___NR_wait4: u32 = 61;
pub const LINUX___NR_kill: u32 = 62;
pub const LINUX___NR_uname: u32 = 63;
pub const LINUX___NR_semget: u32 = 64;
pub const LINUX___NR_semop: u32 = 65;
pub const LINUX___NR_semctl: u32 = 66;
pub const LINUX___NR_shmdt: u32 = 67;
pub const LINUX___NR_msgget: u32 = 68;
pub const LINUX___NR_msgsnd: u32 = 69;
pub const LINUX___NR_msgrcv: u32 = 70;
pub const LINUX___NR_msgctl: u32 = 71;
pub const LINUX___NR_fcntl: u32 = 72;
pub const LINUX___NR_flock: u32 = 73;
pub const LINUX___NR_fsync: u32 = 74;
pub const LINUX___NR_fdatasync: u32 = 75;
pub const LINUX___NR_truncate: u32 = 76;
pub const LINUX___NR_ftruncate: u32 = 77;
pub const LINUX___NR_getdents: u32 = 78;
pub const LINUX___NR_getcwd: u32 = 79;
pub const LINUX___NR_chdir: u32 = 80;
pub const LINUX___NR_fchdir: u32 = 81;
pub const LINUX___NR_rename: u32 = 82;
pub const LINUX___NR_mkdir: u32 = 83;
pub const LINUX___NR_rmdir: u32 = 84;
pub const LINUX___NR_creat: u32 = 85;
pub const LINUX___NR_link: u32 = 86;
pub const LINUX___NR_unlink: u32 = 87;
pub const LINUX___NR_symlink: u32 = 88;
pub const LINUX___NR_readlink: u32 = 89;
pub const LINUX___NR_chmod: u32 = 90;
pub const LINUX___NR_fchmod: u32 = 91;
pub const LINUX___NR_chown: u32 = 92;
pub const LINUX___NR_fchown: u32 = 93;
pub const LINUX___NR_lchown: u32 = 94;
pub const LINUX___NR_umask: u32 = 95;
pub const LINUX___NR_gettimeofday: u32 = 96;
pub const LINUX___NR_getrlimit: u32 = 97;
pub const LINUX___NR_getrusage: u32 = 98;
pub const LINUX___NR_sysinfo: u32 = 99;
pub const LINUX___NR_times: u32 = 100;
pub const LINUX___NR_ptrace: u32 = 101;
pub const LINUX___NR_getuid: u32 = 102;
pub const LINUX___NR_syslog: u32 = 103;
pub const LINUX___NR_getgid: u32 = 104;
pub const LINUX___NR_setuid: u32 = 105;
pub const LINUX___NR_setgid: u32 = 106;
pub const LINUX___NR_geteuid: u32 = 107;
pub const LINUX___NR_getegid: u32 = 108;
pub const LINUX___NR_setpgid: u32 = 109;
pub const LINUX___NR_getppid: u32 = 110;
pub const LINUX___NR_getpgrp: u32 = 111;
pub const LINUX___NR_setsid: u32 = 112;
pub const LINUX___NR_setreuid: u32 = 113;
pub const LINUX___NR_setregid: u32 = 114;
pub const LINUX___NR_getgroups: u32 = 115;
pub const LINUX___NR_setgroups: u32 = 116;
pub const LINUX___NR_setresuid: u32 = 117;
pub const LINUX___NR_getresuid: u32 = 118;
pub const LINUX___NR_setresgid: u32 = 119;
pub const LINUX___NR_getresgid: u32 = 120;
pub const LINUX___NR_getpgid: u32 = 121;
pub const LINUX___NR_setfsuid: u32 = 122;
pub const LINUX___NR_setfsgid: u32 = 123;
pub const LINUX___NR_getsid: u32 = 124;
pub const LINUX___NR_capget: u32 = 125;
pub const LINUX___NR_capset: u32 = 126;
pub const LINUX___NR_rt_sigpending: u32 = 127;
pub const LINUX___NR_rt_sigtimedwait: u32 = 128;
pub const LINUX___NR_rt_sigqueueinfo: u32 = 129;
pub const LINUX___NR_rt_sigsuspend: u32 = 130;
pub const LINUX___NR_sigaltstack: u32 = 131;
pub const LINUX___NR_utime: u32 = 132;
pub const LINUX___NR_mknod: u32 = 133;
pub const LINUX___NR_uselib: u32 = 134;
pub const LINUX___NR_personality: u32 = 135;
pub const LINUX___NR_ustat: u32 = 136;
pub const LINUX___NR_statfs: u32 = 137;
pub const LINUX___NR_fstatfs: u32 = 138;
pub const LINUX___NR_sysfs: u32 = 139;
pub const LINUX___NR_getpriority: u32 = 140;
pub const LINUX___NR_setpriority: u32 = 141;
pub const LINUX___NR_sched_setparam: u32 = 142;
pub const LINUX___NR_sched_getparam: u32 = 143;
pub const LINUX___NR_sched_setscheduler: u32 = 144;
pub const LINUX___NR_sched_getscheduler: u32 = 145;
pub const LINUX___NR_sched_get_priority_max: u32 = 146;
pub const LINUX___NR_sched_get_priority_min: u32 = 147;
pub const LINUX___NR_sched_rr_get_interval: u32 = 148;
pub const LINUX___NR_mlock: u32 = 149;
pub const LINUX___NR_munlock: u32 = 150;
pub const LINUX___NR_mlockall: u32 = 151;
pub const LINUX___NR_munlockall: u32 = 152;
pub const LINUX___NR_vhangup: u32 = 153;
pub const LINUX___NR_modify_ldt: u32 = 154;
pub const LINUX___NR_pivot_root: u32 = 155;
pub const LINUX___NR__sysctl: u32 = 156;
pub const LINUX___NR_prctl: u32 = 157;
pub const LINUX___NR_arch_prctl: u32 = 158;
pub const LINUX___NR_adjtimex: u32 = 159;
pub const LINUX___NR_setrlimit: u32 = 160;
pub const LINUX___NR_chroot: u32 = 161;
pub const LINUX___NR_sync: u32 = 162;
pub const LINUX___NR_acct: u32 = 163;
pub const LINUX___NR_settimeofday: u32 = 164;
pub const LINUX___NR_mount: u32 = 165;
pub const LINUX___NR_umount2: u32 = 166;
pub const LINUX___NR_swapon: u32 = 167;
pub const LINUX___NR_swapoff: u32 = 168;
pub const LINUX___NR_reboot: u32 = 169;
pub const LINUX___NR_sethostname: u32 = 170;
pub const LINUX___NR_setdomainname: u32 = 171;
pub const LINUX___NR_iopl: u32 = 172;
pub const LINUX___NR_ioperm: u32 = 173;
pub const LINUX___NR_create_module: u32 = 174;
pub const LINUX___NR_init_module: u32 = 175;
pub const LINUX___NR_delete_module: u32 = 176;
pub const LINUX___NR_get_kernel_syms: u32 = 177;
pub const LINUX___NR_query_module: u32 = 178;
pub const LINUX___NR_quotactl: u32 = 179;
pub const LINUX___NR_nfsservctl: u32 = 180;
pub const LINUX___NR_getpmsg: u32 = 181;
pub const LINUX___NR_putpmsg: u32 = 182;
pub const LINUX___NR_afs_syscall: u32 = 183;
pub const LINUX___NR_tuxcall: u32 = 184;
pub const LINUX___NR_security: u32 = 185;
pub const LINUX___NR_gettid: u32 = 186;
pub const LINUX___NR_readahead: u32 = 187;
pub const LINUX___NR_setxattr: u32 = 188;
pub const LINUX___NR_lsetxattr: u32 = 189;
pub const LINUX___NR_fsetxattr: u32 = 190;
pub const LINUX___NR_getxattr: u32 = 191;
pub const LINUX___NR_lgetxattr: u32 = 192;
pub const LINUX___NR_fgetxattr: u32 = 193;
pub const LINUX___NR_listxattr: u32 = 194;
pub const LINUX___NR_llistxattr: u32 = 195;
pub const LINUX___NR_flistxattr: u32 = 196;
pub const LINUX___NR_removexattr: u32 = 197;
pub const LINUX___NR_lremovexattr: u32 = 198;
pub const LINUX___NR_fremovexattr: u32 = 199;
pub const LINUX___NR_tkill: u32 = 200;
pub const LINUX___NR_time: u32 = 201;
pub const LINUX___NR_futex: u32 = 202;
pub const LINUX___NR_sched_setaffinity: u32 = 203;
pub const LINUX___NR_sched_getaffinity: u32 = 204;
pub const LINUX___NR_set_thread_area: u32 = 205;
pub const LINUX___NR_io_setup: u32 = 206;
pub const LINUX___NR_io_destroy: u32 = 207;
pub const LINUX___NR_io_getevents: u32 = 208;
pub const LINUX___NR_io_submit: u32 = 209;
pub const LINUX___NR_io_cancel: u32 = 210;
pub const LINUX___NR_get_thread_area: u32 = 211;
pub const LINUX___NR_lookup_dcookie: u32 = 212;
pub const LINUX___NR_epoll_create: u32 = 213;
pub const LINUX___NR_epoll_ctl_old: u32 = 214;
pub const LINUX___NR_epoll_wait_old: u32 = 215;
pub const LINUX___NR_remap_file_pages: u32 = 216;
pub const LINUX___NR_getdents64: u32 = 217;
pub const LINUX___NR_set_tid_address: u32 = 218;
pub const LINUX___NR_restart_syscall: u32 = 219;
pub const LINUX___NR_semtimedop: u32 = 220;
pub const LINUX___NR_fadvise64: u32 = 221;
pub const LINUX___NR_timer_create: u32 = 222;
pub const LINUX___NR_timer_settime: u32 = 223;
pub const LINUX___NR_timer_gettime: u32 = 224;
pub const LINUX___NR_timer_getoverrun: u32 = 225;
pub const LINUX___NR_timer_delete: u32 = 226;
pub const LINUX___NR_clock_settime: u32 = 227;
pub const LINUX___NR_clock_gettime: u32 = 228;
pub const LINUX___NR_clock_getres: u32 = 229;
pub const LINUX___NR_clock_nanosleep: u32 = 230;
pub const LINUX___NR_exit_group: u32 = 231;
pub const LINUX___NR_epoll_wait: u32 = 232;
pub const LINUX___NR_epoll_ctl: u32 = 233;
pub const LINUX___NR_tgkill: u32 = 234;
pub const LINUX___NR_utimes: u32 = 235;
pub const LINUX___NR_vserver: u32 = 236;
pub const LINUX___NR_mbind: u32 = 237;
pub const LINUX___NR_set_mempolicy: u32 = 238;
pub const LINUX___NR_get_mempolicy: u32 = 239;
pub const LINUX___NR_mq_open: u32 = 240;
pub const LINUX___NR_mq_unlink: u32 = 241;
pub const LINUX___NR_mq_timedsend: u32 = 242;
pub const LINUX___NR_mq_timedreceive: u32 = 243;
pub const LINUX___NR_mq_notify: u32 = 244;
pub const LINUX___NR_mq_getsetattr: u32 = 245;
pub const LINUX___NR_kexec_load: u32 = 246;
pub const LINUX___NR_waitid: u32 = 247;
pub const LINUX___NR_add_key: u32 = 248;
pub const LINUX___NR_request_key: u32 = 249;
pub const LINUX___NR_keyctl: u32 = 250;
pub const LINUX___NR_ioprio_set: u32 = 251;
pub const LINUX___NR_ioprio_get: u32 = 252;
pub const LINUX___NR_inotify_init: u32 = 253;
pub const LINUX___NR_inotify_add_watch: u32 = 254;
pub const LINUX___NR_inotify_rm_watch: u32 = 255;
pub const LINUX___NR_migrate_pages: u32 = 256;
pub const LINUX___NR_openat: u32 = 257;
pub const LINUX___NR_mkdirat: u32 = 258;
pub const LINUX___NR_mknodat: u32 = 259;
pub const LINUX___NR_fchownat: u32 = 260;
pub const LINUX___NR_futimesat: u32 = 261;
pub const LINUX___NR_newfstatat: u32 = 262;
pub const LINUX___NR_unlinkat: u32 = 263;
pub const LINUX___NR_renameat: u32 = 264;
pub const LINUX___NR_linkat: u32 = 265;
pub const LINUX___NR_symlinkat: u32 = 266;
pub const LINUX___NR_readlinkat: u32 = 267;
pub const LINUX___NR_fchmodat: u32 = 268;
pub const LINUX___NR_faccessat: u32 = 269;
pub const LINUX___NR_pselect6: u32 = 270;
pub const LINUX___NR_ppoll: u32 = 271;
pub const LINUX___NR_unshare: u32 = 272;
pub const LINUX___NR_set_robust_list: u32 = 273;
pub const LINUX___NR_get_robust_list: u32 = 274;
pub const LINUX___NR_splice: u32 = 275;
pub const LINUX___NR_tee: u32 = 276;
pub const LINUX___NR_sync_file_range: u32 = 277;
pub const LINUX___NR_vmsplice: u32 = 278;
pub const LINUX___NR_move_pages: u32 = 279;
pub const LINUX___NR_utimensat: u32 = 280;
pub const LINUX___NR_epoll_pwait: u32 = 281;
pub const LINUX___NR_signalfd: u32 = 282;
pub const LINUX___NR_timerfd_create: u32 = 283;
pub const LINUX___NR_eventfd: u32 = 284;
pub const LINUX___NR_fallocate: u32 = 285;
pub const LINUX___NR_timerfd_settime: u32 = 286;
pub const LINUX___NR_timerfd_gettime: u32 = 287;
pub const LINUX___NR_accept4: u32 = 288;
pub const LINUX___NR_signalfd4: u32 = 289;
pub const LINUX___NR_eventfd2: u32 = 290;
pub const LINUX___NR_epoll_create1: u32 = 291;
pub const LINUX___NR_dup3: u32 = 292;
pub const LINUX___NR_pipe2: u32 = 293;
pub const LINUX___NR_inotify_init1: u32 = 294;
pub const LINUX___NR_preadv: u32 = 295;
pub const LINUX___NR_pwritev: u32 = 296;
pub const LINUX___NR_rt_tgsigqueueinfo: u32 = 297;
pub const LINUX___NR_perf_event_open: u32 = 298;
pub const LINUX___NR_recvmmsg: u32 = 299;
pub const LINUX___NR_fanotify_init: u32 = 300;
pub const LINUX___NR_fanotify_mark: u32 = 301;
pub const LINUX___NR_prlimit64: u32 = 302;
pub const LINUX___NR_name_to_handle_at: u32 = 303;
pub const LINUX___NR_open_by_handle_at: u32 = 304;
pub const LINUX___NR_clock_adjtime: u32 = 305;
pub const LINUX___NR_syncfs: u32 = 306;
pub const LINUX___NR_sendmmsg: u32 = 307;
pub const LINUX___NR_setns: u32 = 308;
pub const LINUX___NR_getcpu: u32 = 309;
pub const LINUX___NR_process_vm_readv: u32 = 310;
pub const LINUX___NR_process_vm_writev: u32 = 311;
pub const LINUX___NR_kcmp: u32 = 312;
pub const LINUX___NR_finit_module: u32 = 313;
pub const LINUX___NR_sched_setattr: u32 = 314;
pub const LINUX___NR_sched_getattr: u32 = 315;
pub const LINUX___NR_renameat2: u32 = 316;
pub const LINUX___NR_seccomp: u32 = 317;
pub const LINUX___NR_getrandom: u32 = 318;
pub const LINUX___NR_memfd_create: u32 = 319;
pub const LINUX___NR_kexec_file_load: u32 = 320;
pub const LINUX___NR_bpf: u32 = 321;
pub const LINUX___NR_execveat: u32 = 322;
pub const LINUX___NR_userfaultfd: u32 = 323;
pub const LINUX___NR_membarrier: u32 = 324;
pub const LINUX___NR_mlock2: u32 = 325;
pub const LINUX___NR_copy_file_range: u32 = 326;
pub const LINUX___NR_preadv2: u32 = 327;
pub const LINUX___NR_pwritev2: u32 = 328;
pub const LINUX___NR_pkey_mprotect: u32 = 329;
pub const LINUX___NR_pkey_alloc: u32 = 330;
pub const LINUX___NR_pkey_free: u32 = 331;
pub const LINUX___NR_statx: u32 = 332;
pub const LINUX___NR_io_pgetevents: u32 = 333;
pub const LINUX___NR_rseq: u32 = 334;
pub const LINUX___NR_pidfd_send_signal: u32 = 424;
pub const LINUX___NR_io_uring_setup: u32 = 425;
pub const LINUX___NR_io_uring_enter: u32 = 426;
pub const LINUX___NR_io_uring_register: u32 = 427;
pub const LINUX___NR_open_tree: u32 = 428;
pub const LINUX___NR_move_mount: u32 = 429;
pub const LINUX___NR_fsopen: u32 = 430;
pub const LINUX___NR_fsconfig: u32 = 431;
pub const LINUX___NR_fsmount: u32 = 432;
pub const LINUX___NR_fspick: u32 = 433;
pub const LINUX___NR_pidfd_open: u32 = 434;
pub const LINUX___NR_clone3: u32 = 435;
pub const LINUX___NR_close_range: u32 = 436;
pub const LINUX___NR_openat2: u32 = 437;
pub const LINUX___NR_pidfd_getfd: u32 = 438;
pub const LINUX___NR_faccessat2: u32 = 439;
pub const LINUX___NR_process_madvise: u32 = 440;
pub const LINUX___NR_epoll_pwait2: u32 = 441;
pub const LINUX___NR_mount_setattr: u32 = 442;
pub const LINUX___NR_quotactl_fd: u32 = 443;
pub const LINUX___NR_landlock_create_ruleset: u32 = 444;
pub const LINUX___NR_landlock_add_rule: u32 = 445;
pub const LINUX___NR_landlock_restrict_self: u32 = 446;
pub const LINUX___NR_memfd_secret: u32 = 447;
pub const LINUX___NR_process_mrelease: u32 = 448;
pub const LINUX___NR_futex_waitv: u32 = 449;
pub const LINUX___NR_set_mempolicy_home_node: u32 = 450;
pub const LINUX___OLD_UTS_LEN: u32 = 8;
pub const LINUX___NEW_UTS_LEN: u32 = 64;
pub const LINUX_WNOHANG: u32 = 1;
pub const LINUX_WUNTRACED: u32 = 2;
pub const LINUX_WSTOPPED: u32 = 2;
pub const LINUX_WEXITED: u32 = 4;
pub const LINUX_WCONTINUED: u32 = 8;
pub const LINUX_WNOWAIT: u32 = 16777216;
pub const LINUX___WNOTHREAD: u32 = 536870912;
pub const LINUX___WALL: u32 = 1073741824;
pub const LINUX___WCLONE: u32 = 2147483648;
pub const LINUX_P_ALL: u32 = 0;
pub const LINUX_P_PID: u32 = 1;
pub const LINUX_P_PGID: u32 = 2;
pub const LINUX_P_PIDFD: u32 = 3;
pub const LINUX__IOC_NRBITS: u32 = 8;
pub const LINUX__IOC_TYPEBITS: u32 = 8;
pub const LINUX__IOC_SIZEBITS: u32 = 14;
pub const LINUX__IOC_DIRBITS: u32 = 2;
pub const LINUX__IOC_NRMASK: u32 = 255;
pub const LINUX__IOC_TYPEMASK: u32 = 255;
pub const LINUX__IOC_SIZEMASK: u32 = 16383;
pub const LINUX__IOC_DIRMASK: u32 = 3;
pub const LINUX__IOC_NRSHIFT: u32 = 0;
pub const LINUX__IOC_TYPESHIFT: u32 = 8;
pub const LINUX__IOC_SIZESHIFT: u32 = 16;
pub const LINUX__IOC_DIRSHIFT: u32 = 30;
pub const LINUX__IOC_NONE: u32 = 0;
pub const LINUX__IOC_WRITE: u32 = 1;
pub const LINUX__IOC_READ: u32 = 2;
pub const LINUX_IOC_IN: u32 = 1073741824;
pub const LINUX_IOC_OUT: u32 = 2147483648;
pub const LINUX_IOC_INOUT: u32 = 3221225472;
pub const LINUX_IOCSIZE_MASK: u32 = 1073676288;
pub const LINUX_IOCSIZE_SHIFT: u32 = 16;
pub const LINUX_TCGETS: u32 = 21505;
pub const LINUX_TCSETS: u32 = 21506;
pub const LINUX_TCSETSW: u32 = 21507;
pub const LINUX_TCSETSF: u32 = 21508;
pub const LINUX_TCGETA: u32 = 21509;
pub const LINUX_TCSETA: u32 = 21510;
pub const LINUX_TCSETAW: u32 = 21511;
pub const LINUX_TCSETAF: u32 = 21512;
pub const LINUX_TCSBRK: u32 = 21513;
pub const LINUX_TCXONC: u32 = 21514;
pub const LINUX_TCFLSH: u32 = 21515;
pub const LINUX_TIOCEXCL: u32 = 21516;
pub const LINUX_TIOCNXCL: u32 = 21517;
pub const LINUX_TIOCSCTTY: u32 = 21518;
pub const LINUX_TIOCGPGRP: u32 = 21519;
pub const LINUX_TIOCSPGRP: u32 = 21520;
pub const LINUX_TIOCOUTQ: u32 = 21521;
pub const LINUX_TIOCSTI: u32 = 21522;
pub const LINUX_TIOCGWINSZ: u32 = 21523;
pub const LINUX_TIOCSWINSZ: u32 = 21524;
pub const LINUX_TIOCMGET: u32 = 21525;
pub const LINUX_TIOCMBIS: u32 = 21526;
pub const LINUX_TIOCMBIC: u32 = 21527;
pub const LINUX_TIOCMSET: u32 = 21528;
pub const LINUX_TIOCGSOFTCAR: u32 = 21529;
pub const LINUX_TIOCSSOFTCAR: u32 = 21530;
pub const LINUX_FIONREAD: u32 = 21531;
pub const LINUX_TIOCINQ: u32 = 21531;
pub const LINUX_TIOCLINUX: u32 = 21532;
pub const LINUX_TIOCCONS: u32 = 21533;
pub const LINUX_TIOCGSERIAL: u32 = 21534;
pub const LINUX_TIOCSSERIAL: u32 = 21535;
pub const LINUX_TIOCPKT: u32 = 21536;
pub const LINUX_FIONBIO: u32 = 21537;
pub const LINUX_TIOCNOTTY: u32 = 21538;
pub const LINUX_TIOCSETD: u32 = 21539;
pub const LINUX_TIOCGETD: u32 = 21540;
pub const LINUX_TCSBRKP: u32 = 21541;
pub const LINUX_TIOCSBRK: u32 = 21543;
pub const LINUX_TIOCCBRK: u32 = 21544;
pub const LINUX_TIOCGSID: u32 = 21545;
pub const LINUX_TIOCGRS485: u32 = 21550;
pub const LINUX_TIOCSRS485: u32 = 21551;
pub const LINUX_TCGETX: u32 = 21554;
pub const LINUX_TCSETX: u32 = 21555;
pub const LINUX_TCSETXF: u32 = 21556;
pub const LINUX_TCSETXW: u32 = 21557;
pub const LINUX_TIOCVHANGUP: u32 = 21559;
pub const LINUX_FIONCLEX: u32 = 21584;
pub const LINUX_FIOCLEX: u32 = 21585;
pub const LINUX_FIOASYNC: u32 = 21586;
pub const LINUX_TIOCSERCONFIG: u32 = 21587;
pub const LINUX_TIOCSERGWILD: u32 = 21588;
pub const LINUX_TIOCSERSWILD: u32 = 21589;
pub const LINUX_TIOCGLCKTRMIOS: u32 = 21590;
pub const LINUX_TIOCSLCKTRMIOS: u32 = 21591;
pub const LINUX_TIOCSERGSTRUCT: u32 = 21592;
pub const LINUX_TIOCSERGETLSR: u32 = 21593;
pub const LINUX_TIOCSERGETMULTI: u32 = 21594;
pub const LINUX_TIOCSERSETMULTI: u32 = 21595;
pub const LINUX_TIOCMIWAIT: u32 = 21596;
pub const LINUX_TIOCGICOUNT: u32 = 21597;
pub const LINUX_FIOQSIZE: u32 = 21600;
pub const LINUX_TIOCPKT_DATA: u32 = 0;
pub const LINUX_TIOCPKT_FLUSHREAD: u32 = 1;
pub const LINUX_TIOCPKT_FLUSHWRITE: u32 = 2;
pub const LINUX_TIOCPKT_STOP: u32 = 4;
pub const LINUX_TIOCPKT_START: u32 = 8;
pub const LINUX_TIOCPKT_NOSTOP: u32 = 16;
pub const LINUX_TIOCPKT_DOSTOP: u32 = 32;
pub const LINUX_TIOCPKT_IOCTL: u32 = 64;
pub const LINUX_TIOCSER_TEMT: u32 = 1;
pub const LINUX_FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const LINUX_FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const LINUX_X86_FXSR_MAGIC: u32 = 0;
pub const LINUX_UC_FP_XSTATE: u32 = 1;
pub const LINUX_UC_SIGCONTEXT_SS: u32 = 2;
pub const LINUX_UC_STRICT_RESTORE_SS: u32 = 4;
pub const LINUX_EPOLLIN: u32 = 1;
pub const LINUX_EPOLLPRI: u32 = 2;
pub const LINUX_EPOLLOUT: u32 = 4;
pub const LINUX_EPOLLERR: u32 = 8;
pub const LINUX_EPOLLHUP: u32 = 16;
pub const LINUX_EPOLLNVAL: u32 = 32;
pub const LINUX_EPOLLRDNORM: u32 = 64;
pub const LINUX_EPOLLRDBAND: u32 = 128;
pub const LINUX_EPOLLWRNORM: u32 = 256;
pub const LINUX_EPOLLWRBAND: u32 = 512;
pub const LINUX_EPOLLMSG: u32 = 1024;
pub const LINUX_EPOLLRDHUP: u32 = 8192;
pub const LINUX_EPOLLEXCLUSIVE: u32 = 268435456;
pub const LINUX_EPOLLWAKEUP: u32 = 536870912;
pub const LINUX_EPOLLONESHOT: u32 = 1073741824;
pub const LINUX_EPOLLET: u32 = 2147483648;
pub type linux___u16 = ::core::ffi::c_ushort;
pub type linux___u32 = ::core::ffi::c_uint;
pub type linux___u64 = ::core::ffi::c_ulonglong;
pub type linux___kernel_sighandler_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
pub type linux___kernel_key_t = ::core::ffi::c_int;
pub type linux___kernel_mqd_t = ::core::ffi::c_int;
pub type linux___kernel_old_uid_t = ::core::ffi::c_ushort;
pub type linux___kernel_old_gid_t = ::core::ffi::c_ushort;
pub type linux___kernel_old_dev_t = ::core::ffi::c_ulong;
pub type linux___kernel_long_t = ::core::ffi::c_long;
pub type linux___kernel_ulong_t = ::core::ffi::c_ulong;
pub type linux___kernel_ino_t = linux___kernel_ulong_t;
pub type linux___kernel_mode_t = ::core::ffi::c_uint;
pub type linux___kernel_pid_t = ::core::ffi::c_int;
pub type linux___kernel_ipc_pid_t = ::core::ffi::c_int;
pub type linux___kernel_uid_t = ::core::ffi::c_uint;
pub type linux___kernel_gid_t = ::core::ffi::c_uint;
pub type linux___kernel_suseconds_t = linux___kernel_long_t;
pub type linux___kernel_daddr_t = ::core::ffi::c_int;
pub type linux___kernel_uid32_t = ::core::ffi::c_uint;
pub type linux___kernel_gid32_t = ::core::ffi::c_uint;
pub type linux___kernel_size_t = linux___kernel_ulong_t;
pub type linux___kernel_ssize_t = linux___kernel_long_t;
pub type linux___kernel_ptrdiff_t = linux___kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___kernel_fsid_t {
    pub val: [::core::ffi::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___kernel_fsid_t() {
    const UNINIT: ::core::mem::MaybeUninit<linux___kernel_fsid_t> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___kernel_fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(linux___kernel_fsid_t))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___kernel_fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(linux___kernel_fsid_t))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_fsid_t),
            "::",
            stringify!(val)
        )
    );
}
pub type linux___kernel_off_t = linux___kernel_long_t;
pub type linux___kernel_loff_t = ::core::ffi::c_longlong;
pub type linux___kernel_old_time_t = linux___kernel_long_t;
pub type linux___kernel_time_t = linux___kernel_long_t;
pub type linux___kernel_time64_t = ::core::ffi::c_longlong;
pub type linux___kernel_clock_t = linux___kernel_long_t;
pub type linux___kernel_timer_t = ::core::ffi::c_int;
pub type linux___kernel_clockid_t = ::core::ffi::c_int;
pub type linux___kernel_caddr_t = *mut ::core::ffi::c_char;
pub type linux___kernel_uid16_t = ::core::ffi::c_ushort;
pub type linux___kernel_gid16_t = ::core::ffi::c_ushort;
pub type linux___be16 = linux___u16;
pub type linux___be32 = linux___u32;
pub type linux___poll_t = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_flock {
    pub l_type: ::core::ffi::c_short,
    pub l_whence: ::core::ffi::c_short,
    pub l_start: linux___kernel_off_t,
    pub l_len: linux___kernel_off_t,
    pub l_pid: linux___kernel_pid_t,
}
#[test]
fn bindgen_test_layout_flock() {
    const UNINIT: ::core::mem::MaybeUninit<linux_flock> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_flock>(),
        32usize,
        concat!("Size of: ", stringify!(linux_flock))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_flock>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_flock))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_flock64 {
    pub l_type: ::core::ffi::c_short,
    pub l_whence: ::core::ffi::c_short,
    pub l_start: linux___kernel_loff_t,
    pub l_len: linux___kernel_loff_t,
    pub l_pid: linux___kernel_pid_t,
}
#[test]
fn bindgen_test_layout_flock64() {
    const UNINIT: ::core::mem::MaybeUninit<linux_flock64> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_flock64>(),
        32usize,
        concat!("Size of: ", stringify!(linux_flock64))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_flock64>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_flock64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_whence) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_whence)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_start) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_len)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_flock64),
            "::",
            stringify!(l_pid)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_epoll_event {
    pub events: linux___poll_t,
    pub data: linux___u64,
}
#[test]
fn bindgen_test_layout_epoll_event() {
    const UNINIT: ::core::mem::MaybeUninit<linux_epoll_event> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_epoll_event>(),
        12usize,
        concat!("Size of: ", stringify!(linux_epoll_event))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_epoll_event>(),
        1usize,
        concat!("Alignment of ", stringify!(linux_epoll_event))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).events) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_epoll_event),
            "::",
            stringify!(events)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_epoll_event),
            "::",
            stringify!(data)
        )
    );
}
pub type linux___kernel_sa_family_t = ::core::ffi::c_ushort;
pub const LINUX_IPPROTO_IP: linux__bindgen_ty_1 = 0;
pub const LINUX_IPPROTO_ICMP: linux__bindgen_ty_1 = 1;
pub const LINUX_IPPROTO_IGMP: linux__bindgen_ty_1 = 2;
pub const LINUX_IPPROTO_IPIP: linux__bindgen_ty_1 = 4;
pub const LINUX_IPPROTO_TCP: linux__bindgen_ty_1 = 6;
pub const LINUX_IPPROTO_EGP: linux__bindgen_ty_1 = 8;
pub const LINUX_IPPROTO_PUP: linux__bindgen_ty_1 = 12;
pub const LINUX_IPPROTO_UDP: linux__bindgen_ty_1 = 17;
pub const LINUX_IPPROTO_IDP: linux__bindgen_ty_1 = 22;
pub const LINUX_IPPROTO_TP: linux__bindgen_ty_1 = 29;
pub const LINUX_IPPROTO_DCCP: linux__bindgen_ty_1 = 33;
pub const LINUX_IPPROTO_IPV6: linux__bindgen_ty_1 = 41;
pub const LINUX_IPPROTO_RSVP: linux__bindgen_ty_1 = 46;
pub const LINUX_IPPROTO_GRE: linux__bindgen_ty_1 = 47;
pub const LINUX_IPPROTO_ESP: linux__bindgen_ty_1 = 50;
pub const LINUX_IPPROTO_AH: linux__bindgen_ty_1 = 51;
pub const LINUX_IPPROTO_MTP: linux__bindgen_ty_1 = 92;
pub const LINUX_IPPROTO_BEETPH: linux__bindgen_ty_1 = 94;
pub const LINUX_IPPROTO_ENCAP: linux__bindgen_ty_1 = 98;
pub const LINUX_IPPROTO_PIM: linux__bindgen_ty_1 = 103;
pub const LINUX_IPPROTO_COMP: linux__bindgen_ty_1 = 108;
pub const LINUX_IPPROTO_L2TP: linux__bindgen_ty_1 = 115;
pub const LINUX_IPPROTO_SCTP: linux__bindgen_ty_1 = 132;
pub const LINUX_IPPROTO_UDPLITE: linux__bindgen_ty_1 = 136;
pub const LINUX_IPPROTO_MPLS: linux__bindgen_ty_1 = 137;
pub const LINUX_IPPROTO_ETHERNET: linux__bindgen_ty_1 = 143;
pub const LINUX_IPPROTO_RAW: linux__bindgen_ty_1 = 255;
pub const LINUX_IPPROTO_MPTCP: linux__bindgen_ty_1 = 262;
pub const LINUX_IPPROTO_MAX: linux__bindgen_ty_1 = 263;
pub type linux__bindgen_ty_1 = ::core::ffi::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_in_addr {
    pub s_addr: linux___be32,
}
#[test]
fn bindgen_test_layout_in_addr() {
    const UNINIT: ::core::mem::MaybeUninit<linux_in_addr> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(linux_in_addr))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_in_addr))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).s_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sockaddr_in {
    pub sin_family: linux___kernel_sa_family_t,
    pub sin_port: linux___be16,
    pub sin_addr: linux_in_addr,
    pub l__pad: [::core::ffi::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sockaddr_in> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(linux_sockaddr_in))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(linux_sockaddr_in))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_family) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_port) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sin_addr) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l__pad) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sockaddr_in),
            "::",
            stringify!(l__pad)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___kernel_timespec {
    pub tv_sec: linux___kernel_time64_t,
    pub tv_nsec: ::core::ffi::c_longlong,
}
#[test]
fn bindgen_test_layout___kernel_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<linux___kernel_timespec> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___kernel_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(linux___kernel_timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___kernel_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___kernel_timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___kernel_old_timeval {
    pub tv_sec: linux___kernel_long_t,
    pub tv_usec: linux___kernel_long_t,
}
#[test]
fn bindgen_test_layout___kernel_old_timeval() {
    const UNINIT: ::core::mem::MaybeUninit<linux___kernel_old_timeval> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___kernel_old_timeval>(),
        16usize,
        concat!("Size of: ", stringify!(linux___kernel_old_timeval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___kernel_old_timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___kernel_old_timeval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_old_timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___kernel_old_timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_timespec {
    pub tv_sec: linux___kernel_old_time_t,
    pub tv_nsec: ::core::ffi::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    const UNINIT: ::core::mem::MaybeUninit<linux_timespec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_timespec>(),
        16usize,
        concat!("Size of: ", stringify!(linux_timespec))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_timespec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_nsec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_timeval {
    pub tv_sec: linux___kernel_old_time_t,
    pub tv_usec: linux___kernel_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    const UNINIT: ::core::mem::MaybeUninit<linux_timeval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_timeval>(),
        16usize,
        concat!("Size of: ", stringify!(linux_timeval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_timeval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_sec) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tv_usec) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_itimerspec {
    pub it_interval: linux_timespec,
    pub it_value: linux_timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    const UNINIT: ::core::mem::MaybeUninit<linux_itimerspec> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(linux_itimerspec))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_itimerspec))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_itimerval {
    pub it_interval: linux_timeval,
    pub it_value: linux_timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    const UNINIT: ::core::mem::MaybeUninit<linux_itimerval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(linux_itimerval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_itimerval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_interval) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).it_value) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_rusage {
    pub ru_utime: linux___kernel_old_timeval,
    pub ru_stime: linux___kernel_old_timeval,
    pub ru_maxrss: linux___kernel_long_t,
    pub ru_ixrss: linux___kernel_long_t,
    pub ru_idrss: linux___kernel_long_t,
    pub ru_isrss: linux___kernel_long_t,
    pub ru_minflt: linux___kernel_long_t,
    pub ru_majflt: linux___kernel_long_t,
    pub ru_nswap: linux___kernel_long_t,
    pub ru_inblock: linux___kernel_long_t,
    pub ru_oublock: linux___kernel_long_t,
    pub ru_msgsnd: linux___kernel_long_t,
    pub ru_msgrcv: linux___kernel_long_t,
    pub ru_nsignals: linux___kernel_long_t,
    pub ru_nvcsw: linux___kernel_long_t,
    pub ru_nivcsw: linux___kernel_long_t,
}
#[test]
fn bindgen_test_layout_rusage() {
    const UNINIT: ::core::mem::MaybeUninit<linux_rusage> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_rusage>(),
        144usize,
        concat!("Size of: ", stringify!(linux_rusage))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_rusage))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_utime) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_stime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_maxrss) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_ixrss) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_idrss) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_isrss) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_minflt) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_majflt) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nswap) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_inblock) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_oublock) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_msgsnd) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_msgrcv) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nsignals) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nvcsw) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ru_nivcsw) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_rlimit {
    pub rlim_cur: linux___kernel_ulong_t,
    pub rlim_max: linux___kernel_ulong_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    const UNINIT: ::core::mem::MaybeUninit<linux_rlimit> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(linux_rlimit))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_rlimit))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_rlimit64 {
    pub rlim_cur: linux___u64,
    pub rlim_max: linux___u64,
}
#[test]
fn bindgen_test_layout_rlimit64() {
    const UNINIT: ::core::mem::MaybeUninit<linux_rlimit64> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_rlimit64>(),
        16usize,
        concat!("Size of: ", stringify!(linux_rlimit64))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_rlimit64>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_rlimit64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_cur) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rlimit64),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rlim_max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rlimit64),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[repr(align(32))]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_rseq {
    pub cpu_id_start: linux___u32,
    pub cpu_id: linux___u32,
    pub rseq_cs: linux___u64,
    pub flags: linux___u32,
}
#[test]
fn bindgen_test_layout_rseq() {
    const UNINIT: ::core::mem::MaybeUninit<linux_rseq> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_rseq>(),
        32usize,
        concat!("Size of: ", stringify!(linux_rseq))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_rseq>(),
        32usize,
        concat!("Alignment of ", stringify!(linux_rseq))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cpu_id_start) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(cpu_id_start)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cpu_id) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(cpu_id)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rseq_cs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(rseq_cs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_rseq),
            "::",
            stringify!(flags)
        )
    );
}
#[doc = " struct linux_clone_args - arguments for the clone3 syscall\n @flags:        Flags for the new process as listed above.\n                All flags are valid except for LINUX_CSIGNAL and\n                LINUX_CLONE_DETACHED.\n @pidfd:        If LINUX_CLONE_PIDFD is set, a pidfd will be\n                returned in this argument.\n @child_tid:    If LINUX_CLONE_CHILD_SETTID is set, the TID of the\n                child process will be returned in the child's\n                memory.\n @parent_tid:   If LINUX_CLONE_PARENT_SETTID is set, the TID of\n                the child process will be returned in the\n                parent's memory.\n @exit_signal:  The exit_signal the parent process will be\n                sent when the child exits.\n @stack:        Specify the location of the stack for the\n                child process.\n                Note, @stack is expected to point to the\n                lowest address. The stack direction will be\n                determined by the kernel and set up\n                appropriately based on @stack_size.\n @stack_size:   The size of the stack for the child process.\n @tls:          If LINUX_CLONE_SETTLS is set, the tls descriptor\n                is set to tls.\n @set_tid:      Pointer to an array of type *pid_t. The size\n                of the array is defined using @set_tid_size.\n                This array is used to select PIDs/TIDs for\n                newly created processes. The first element in\n                this defines the PID in the most nested PID\n                namespace. Each additional element in the array\n                defines the PID in the parent PID namespace of\n                the original PID namespace. If the array has\n                less entries than the number of currently\n                nested PID namespaces only the PIDs in the\n                corresponding namespaces are set.\n @set_tid_size: This defines the size of the array referenced\n                in @set_tid. This cannot be larger than the\n                kernel's limit of nested PID namespaces.\n @cgroup:       If LINUX_CLONE_INTO_CGROUP is specified set this to\n                a file descriptor for the cgroup.\n\n The structure is versioned by size and thus extensible.\n New struct members must go at the end of the struct and\n must be properly 64bit aligned."]
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_clone_args {
    pub flags: linux___u64,
    pub pidfd: linux___u64,
    pub child_tid: linux___u64,
    pub parent_tid: linux___u64,
    pub exit_signal: linux___u64,
    pub stack: linux___u64,
    pub stack_size: linux___u64,
    pub tls: linux___u64,
    pub set_tid: linux___u64,
    pub set_tid_size: linux___u64,
    pub cgroup: linux___u64,
}
#[test]
fn bindgen_test_layout_clone_args() {
    const UNINIT: ::core::mem::MaybeUninit<linux_clone_args> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_clone_args>(),
        88usize,
        concat!("Size of: ", stringify!(linux_clone_args))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_clone_args>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_clone_args))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).pidfd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(pidfd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).child_tid) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(child_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).parent_tid) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(parent_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).exit_signal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(exit_signal)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stack) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).stack_size) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(stack_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).tls) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(tls)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).set_tid) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(set_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).set_tid_size) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(set_tid_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cgroup) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_clone_args),
            "::",
            stringify!(cgroup)
        )
    );
}
pub type linux_sigset_t = ::core::ffi::c_ulong;
pub type linux___signalfn_t =
    ::core::option::Option<unsafe extern "C" fn(arg1: ::core::ffi::c_int)>;
pub type linux___sighandler_t = linux___signalfn_t;
pub type linux___restorefn_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type linux___sigrestore_t = linux___restorefn_t;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sigaction {
    pub lsa_handler: linux___sighandler_t,
    pub lsa_flags: ::core::ffi::c_ulong,
    pub lsa_restorer: linux___sigrestore_t,
    pub lsa_mask: linux_sigset_t,
}
#[test]
fn bindgen_test_layout_sigaction() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigaction> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigaction>(),
        32usize,
        concat!("Size of: ", stringify!(linux_sigaction))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigaction))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_handler) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_handler)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_restorer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_restorer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsa_mask) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaction),
            "::",
            stringify!(lsa_mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_sigaltstack {
    pub ss_sp: *mut ::core::ffi::c_void,
    pub ss_flags: ::core::ffi::c_int,
    pub ss_size: linux___kernel_size_t,
}
#[test]
fn bindgen_test_layout_sigaltstack() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigaltstack> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(linux_sigaltstack))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigaltstack))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_sp) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_flags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
}
pub type linux_stack_t = linux_sigaltstack;
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_sigval {
    pub sival_int: ::core::ffi::c_int,
    pub sival_ptr: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout_sigval() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigval> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigval>(),
        8usize,
        concat!("Size of: ", stringify!(linux_sigval))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigval))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sival_int) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sival_ptr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
impl ::core::fmt::Debug for linux_sigval {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_sigval {{ union }}")
    }
}
pub type linux_sigval_t = linux_sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux___sifields {
    pub l_kill: linux___sifields__bindgen_ty_1,
    pub l_timer: linux___sifields__bindgen_ty_2,
    pub l_rt: linux___sifields__bindgen_ty_3,
    pub l_sigchld: linux___sifields__bindgen_ty_4,
    pub l_sigfault: linux___sifields__bindgen_ty_5,
    pub l_sigpoll: linux___sifields__bindgen_ty_6,
    pub l_sigsys: linux___sifields__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_1 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_1),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_1),
            "::",
            stringify!(l_uid)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_2 {
    pub l_tid: linux___kernel_timer_t,
    pub l_overrun: ::core::ffi::c_int,
    pub l_sigval: linux_sigval_t,
    pub l_sys_private: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_2> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_tid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_tid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_overrun) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_overrun)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_sigval)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sys_private) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_2),
            "::",
            stringify!(l_sys_private)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields__bindgen_ty_2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "linux___sifields__bindgen_ty_2 {{ l_tid: {:?}, l_overrun: {:?}, l_sigval: {:?}, l_sys_private: {:?} }}" , self . l_tid , self . l_overrun , self . l_sigval , self . l_sys_private)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_3 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
    pub l_sigval: linux_sigval_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_3> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_3))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigval) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_3),
            "::",
            stringify!(l_sigval)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields__bindgen_ty_3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux___sifields__bindgen_ty_3 {{ l_pid: {:?}, l_uid: {:?}, l_sigval: {:?} }}",
            self.l_pid, self.l_uid, self.l_sigval
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_4 {
    pub l_pid: linux___kernel_pid_t,
    pub l_uid: linux___kernel_uid32_t,
    pub l_status: ::core::ffi::c_int,
    pub l_utime: linux___kernel_clock_t,
    pub l_stime: linux___kernel_clock_t,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_4() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_4> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_4>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_4))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pid) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_pid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_uid) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_uid)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_status) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_status)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_utime) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_utime)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_stime) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_4),
            "::",
            stringify!(l_stime)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux___sifields__bindgen_ty_5 {
    pub l_addr: *mut ::core::ffi::c_void,
    pub l__bindgen_anon_1: linux___sifields__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux___sifields__bindgen_ty_5__bindgen_ty_1 {
    pub l_trapno: ::core::ffi::c_int,
    pub l_addr_lsb: ::core::ffi::c_short,
    pub l_addr_bnd: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub l_addr_pkey: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    pub l_perf: linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub l_dummy_bnd: [::core::ffi::c_char; 8usize],
    pub l_lower: *mut ::core::ffi::c_void,
    pub l_upper: *mut ::core::ffi::c_void,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_dummy_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_dummy_bnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_lower) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_lower)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_upper) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_upper)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2 {
    pub l_dummy_pkey: [::core::ffi::c_char; 8usize],
    pub l_pkey: linux___u32,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_dummy_pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_dummy_pkey)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_pkey) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(l_pkey)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3 {
    pub l_data: ::core::ffi::c_ulong,
    pub l_type: linux___u32,
    pub l_flags: linux___u32,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::core::mem::MaybeUninit<
        linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3,
    > = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_data)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_type)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_flags) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(l_flags)
        )
    );
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_5__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_trapno) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_trapno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_lsb) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_lsb)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_bnd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_bnd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr_pkey) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_addr_pkey)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_perf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5__bindgen_ty_1),
            "::",
            stringify!(l_perf)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields__bindgen_ty_5__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux___sifields__bindgen_ty_5__bindgen_ty_1 {{ union }}"
        )
    }
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_5() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_5> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_5>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_5))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_5),
            "::",
            stringify!(l_addr)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields__bindgen_ty_5 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux___sifields__bindgen_ty_5 {{ l_addr: {:?}, l__bindgen_anon_1: {:?} }}",
            self.l_addr, self.l__bindgen_anon_1
        )
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_6 {
    pub l_band: ::core::ffi::c_long,
    pub l_fd: ::core::ffi::c_int,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_6() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_6> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_6>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_6))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_6>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_6))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_band) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_6),
            "::",
            stringify!(l_band)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_fd) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_6),
            "::",
            stringify!(l_fd)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux___sifields__bindgen_ty_7 {
    pub l_call_addr: *mut ::core::ffi::c_void,
    pub l_syscall: ::core::ffi::c_int,
    pub l_arch: ::core::ffi::c_uint,
}
#[test]
fn bindgen_test_layout___sifields__bindgen_ty_7() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields__bindgen_ty_7> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields__bindgen_ty_7>(),
        16usize,
        concat!("Size of: ", stringify!(linux___sifields__bindgen_ty_7))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields__bindgen_ty_7>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields__bindgen_ty_7))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_call_addr) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_call_addr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_syscall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_syscall)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_arch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields__bindgen_ty_7),
            "::",
            stringify!(l_arch)
        )
    );
}
#[test]
fn bindgen_test_layout___sifields() {
    const UNINIT: ::core::mem::MaybeUninit<linux___sifields> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux___sifields>(),
        32usize,
        concat!("Size of: ", stringify!(linux___sifields))
    );
    assert_eq!(
        ::core::mem::align_of::<linux___sifields>(),
        8usize,
        concat!("Alignment of ", stringify!(linux___sifields))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_kill) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_kill)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_timer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_timer)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_rt) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_rt)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigchld) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigchld)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigfault) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigfault)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigpoll) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigpoll)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sigsys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux___sifields),
            "::",
            stringify!(l_sigsys)
        )
    );
}
impl ::core::fmt::Debug for linux___sifields {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux___sifields {{ union }}")
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_siginfo {
    pub l__bindgen_anon_1: linux_siginfo__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_siginfo__bindgen_ty_1 {
    pub l__bindgen_anon_1: linux_siginfo__bindgen_ty_1__bindgen_ty_1,
    pub l_si_pad: [::core::ffi::c_int; 32usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_siginfo__bindgen_ty_1__bindgen_ty_1 {
    pub lsi_signo: ::core::ffi::c_int,
    pub lsi_errno: ::core::ffi::c_int,
    pub lsi_code: ::core::ffi::c_int,
    pub l_sifields: linux___sifields,
}
#[test]
fn bindgen_test_layout_siginfo__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_siginfo__bindgen_ty_1__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo__bindgen_ty_1__bindgen_ty_1>(),
        48usize,
        concat!(
            "Size of: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_signo) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_signo)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_errno) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_errno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).lsi_code) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(lsi_code)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_sifields) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(l_sifields)
        )
    );
}
impl ::core::fmt::Debug for linux_siginfo__bindgen_ty_1__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "linux_siginfo__bindgen_ty_1__bindgen_ty_1 {{ lsi_signo: {:?}, lsi_errno: {:?}, lsi_code: {:?}, l_sifields: {:?} }}" , self . lsi_signo , self . lsi_errno , self . lsi_code , self . l_sifields)
    }
}
#[test]
fn bindgen_test_layout_siginfo__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_siginfo__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo__bindgen_ty_1>(),
        128usize,
        concat!("Size of: ", stringify!(linux_siginfo__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_siginfo__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l_si_pad) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_siginfo__bindgen_ty_1),
            "::",
            stringify!(l_si_pad)
        )
    );
}
impl ::core::fmt::Debug for linux_siginfo__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_siginfo__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_siginfo() {
    assert_eq!(
        ::core::mem::size_of::<linux_siginfo>(),
        128usize,
        concat!("Size of: ", stringify!(linux_siginfo))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_siginfo))
    );
}
impl ::core::fmt::Debug for linux_siginfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(
            f,
            "linux_siginfo {{ l__bindgen_anon_1: {:?} }}",
            self.l__bindgen_anon_1
        )
    }
}
pub type linux_siginfo_t = linux_siginfo;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux_new_utsname {
    pub sysname: [::core::ffi::c_char; 65usize],
    pub nodename: [::core::ffi::c_char; 65usize],
    pub release: [::core::ffi::c_char; 65usize],
    pub version: [::core::ffi::c_char; 65usize],
    pub machine: [::core::ffi::c_char; 65usize],
    pub domainname: [::core::ffi::c_char; 65usize],
}
#[test]
fn bindgen_test_layout_new_utsname() {
    const UNINIT: ::core::mem::MaybeUninit<linux_new_utsname> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_new_utsname>(),
        390usize,
        concat!("Size of: ", stringify!(linux_new_utsname))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_new_utsname>(),
        1usize,
        concat!("Alignment of ", stringify!(linux_new_utsname))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sysname) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(sysname)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).nodename) as usize - ptr as usize },
        65usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(nodename)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).release) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        195usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).machine) as usize - ptr as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(machine)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).domainname) as usize - ptr as usize },
        325usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_new_utsname),
            "::",
            stringify!(domainname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq, Eq)]
pub struct linux__fpx_sw_bytes {
    pub magic1: linux___u32,
    pub extended_size: linux___u32,
    pub xfeatures: linux___u64,
    pub xstate_size: linux___u32,
    pub padding: [linux___u32; 7usize],
}
#[test]
fn bindgen_test_layout__fpx_sw_bytes() {
    const UNINIT: ::core::mem::MaybeUninit<linux__fpx_sw_bytes> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux__fpx_sw_bytes>(),
        48usize,
        concat!("Size of: ", stringify!(linux__fpx_sw_bytes))
    );
    assert_eq!(
        ::core::mem::align_of::<linux__fpx_sw_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(linux__fpx_sw_bytes))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).magic1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(magic1)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).extended_size) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(extended_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xfeatures) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(xfeatures)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xstate_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(xstate_size)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpx_sw_bytes),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux__fpstate_64 {
    pub cwd: linux___u16,
    pub swd: linux___u16,
    pub twd: linux___u16,
    pub fop: linux___u16,
    pub rip: linux___u64,
    pub rdp: linux___u64,
    pub mxcsr: linux___u32,
    pub mxcsr_mask: linux___u32,
    pub st_space: [linux___u32; 32usize],
    pub xmm_space: [linux___u32; 64usize],
    pub reserved2: [linux___u32; 12usize],
    pub l__bindgen_anon_1: linux__fpstate_64__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux__fpstate_64__bindgen_ty_1 {
    pub reserved3: [linux___u32; 12usize],
    pub sw_reserved: linux__fpx_sw_bytes,
}
#[test]
fn bindgen_test_layout__fpstate_64__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux__fpstate_64__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux__fpstate_64__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(linux__fpstate_64__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux__fpstate_64__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(linux__fpstate_64__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved3) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64__bindgen_ty_1),
            "::",
            stringify!(reserved3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).sw_reserved) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64__bindgen_ty_1),
            "::",
            stringify!(sw_reserved)
        )
    );
}
impl ::core::fmt::Debug for linux__fpstate_64__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux__fpstate_64__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout__fpstate_64() {
    const UNINIT: ::core::mem::MaybeUninit<linux__fpstate_64> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux__fpstate_64>(),
        512usize,
        concat!("Size of: ", stringify!(linux__fpstate_64))
    );
    assert_eq!(
        ::core::mem::align_of::<linux__fpstate_64>(),
        8usize,
        concat!("Alignment of ", stringify!(linux__fpstate_64))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cwd) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).swd) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(swd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).twd) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(twd)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fop) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(fop)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rdp) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(rdp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mxcsr) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(mxcsr)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).mxcsr_mask) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(mxcsr_mask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).st_space) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(st_space)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).xmm_space) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(xmm_space)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved2) as usize - ptr as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(linux__fpstate_64),
            "::",
            stringify!(reserved2)
        )
    );
}
impl ::core::fmt::Debug for linux__fpstate_64 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "linux__fpstate_64 {{ cwd: {:?}, swd: {:?}, twd: {:?}, fop: {:?}, rip: {:?}, rdp: {:?}, mxcsr: {:?}, mxcsr_mask: {:?}, st_space: {:?}, xmm_space: {:?}, reserved2: {:?}, l__bindgen_anon_1: {:?} }}" , self . cwd , self . swd , self . twd , self . fop , self . rip , self . rdp , self . mxcsr , self . mxcsr_mask , self . st_space , self . xmm_space , self . reserved2 , self . l__bindgen_anon_1)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_sigcontext {
    pub r8: linux___u64,
    pub r9: linux___u64,
    pub r10: linux___u64,
    pub r11: linux___u64,
    pub r12: linux___u64,
    pub r13: linux___u64,
    pub r14: linux___u64,
    pub r15: linux___u64,
    pub rdi: linux___u64,
    pub rsi: linux___u64,
    pub rbp: linux___u64,
    pub rbx: linux___u64,
    pub rdx: linux___u64,
    pub rax: linux___u64,
    pub rcx: linux___u64,
    pub rsp: linux___u64,
    pub rip: linux___u64,
    pub eflags: linux___u64,
    pub cs: linux___u16,
    pub gs: linux___u16,
    pub fs: linux___u16,
    pub l__bindgen_anon_1: linux_sigcontext__bindgen_ty_1,
    pub err: linux___u64,
    pub trapno: linux___u64,
    pub oldmask: linux___u64,
    pub cr2: linux___u64,
    pub fpstate: *mut linux__fpstate_64,
    pub reserved1: [linux___u64; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union linux_sigcontext__bindgen_ty_1 {
    pub ss: linux___u16,
    pub l__pad0: linux___u16,
}
#[test]
fn bindgen_test_layout_sigcontext__bindgen_ty_1() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigcontext__bindgen_ty_1> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigcontext__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(linux_sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigcontext__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(linux_sigcontext__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ss) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext__bindgen_ty_1),
            "::",
            stringify!(ss)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).l__pad0) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext__bindgen_ty_1),
            "::",
            stringify!(l__pad0)
        )
    );
}
impl ::core::fmt::Debug for linux_sigcontext__bindgen_ty_1 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write!(f, "linux_sigcontext__bindgen_ty_1 {{ union }}")
    }
}
#[test]
fn bindgen_test_layout_sigcontext() {
    const UNINIT: ::core::mem::MaybeUninit<linux_sigcontext> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_sigcontext>(),
        256usize,
        concat!("Size of: ", stringify!(linux_sigcontext))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_sigcontext>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_sigcontext))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r8) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r8)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r9) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r9)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r10) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r10)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r11) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r11)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r12) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r12)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r13) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r13)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r14) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r14)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).r15) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(r15)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rdi) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rdi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rsi) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rsi)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbp) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rbp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rbx) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rbx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rdx) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rdx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rax) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rax)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rcx) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rcx)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rsp) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rsp)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).rip) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(rip)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).eflags) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cs) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(cs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).gs) as usize - ptr as usize },
        146usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(gs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fs) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(fs)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).err) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(err)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).trapno) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(trapno)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).oldmask) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(oldmask)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).cr2) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(cr2)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).fpstate) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(fpstate)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).reserved1) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_sigcontext),
            "::",
            stringify!(reserved1)
        )
    );
}
impl ::core::fmt::Debug for linux_sigcontext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "linux_sigcontext {{ r8: {:?}, r9: {:?}, r10: {:?}, r11: {:?}, r12: {:?}, r13: {:?}, r14: {:?}, r15: {:?}, rdi: {:?}, rsi: {:?}, rbp: {:?}, rbx: {:?}, rdx: {:?}, rax: {:?}, rcx: {:?}, rsp: {:?}, rip: {:?}, eflags: {:?}, cs: {:?}, gs: {:?}, fs: {:?}, l__bindgen_anon_1: {:?}, err: {:?}, trapno: {:?}, oldmask: {:?}, cr2: {:?}, fpstate: {:?}, reserved1: {:?} }}" , self . r8 , self . r9 , self . r10 , self . r11 , self . r12 , self . r13 , self . r14 , self . r15 , self . rdi , self . rsi , self . rbp , self . rbx , self . rdx , self . rax , self . rcx , self . rsp , self . rip , self . eflags , self . cs , self . gs , self . fs , self . l__bindgen_anon_1 , self . err , self . trapno , self . oldmask , self . cr2 , self . fpstate , self . reserved1)
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct linux_ucontext {
    pub uc_flags: ::core::ffi::c_ulong,
    pub uc_link: *mut linux_ucontext,
    pub uc_stack: linux_stack_t,
    pub uc_mcontext: linux_sigcontext,
    pub uc_sigmask: linux_sigset_t,
}
#[test]
fn bindgen_test_layout_ucontext() {
    const UNINIT: ::core::mem::MaybeUninit<linux_ucontext> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<linux_ucontext>(),
        304usize,
        concat!("Size of: ", stringify!(linux_ucontext))
    );
    assert_eq!(
        ::core::mem::align_of::<linux_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(linux_ucontext))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_flags)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_link) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_stack) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_mcontext) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).uc_sigmask) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(linux_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
}
impl ::core::fmt::Debug for linux_ucontext {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        write ! (f , "linux_ucontext {{ uc_flags: {:?}, uc_link: {:?}, uc_stack: {:?}, uc_mcontext: {:?}, uc_sigmask: {:?} }}" , self . uc_flags , self . uc_link , self . uc_stack , self . uc_mcontext , self . uc_sigmask)
    }
}
